{"version":3,"file":"index.esm.js","sources":["../../utils.ts","../../http/utils.ts","../../http/fetch.ts","../../fabric.ts","../../liteloader.ts","../../http/abort.ts","../../http/agents.ts","../../http/error.ts","../../http/metadata.ts","../../http/retry.ts","../../http/segment.ts","../../http/status.ts","../../http/validator.ts","../../http/download.ts","../../downloadTask.ts","../../minecraft.ts","../../profile.ts","../../forge.ts","../../unzip.ts","../../curseforge.ts","../../optifine.ts","../../java.ts","../../java-runtime.ts","../../diagnose.ts"],"sourcesContent":["import { _exists as exists, _mkdir as mkdir, _pipeline as pipeline, _readFile as readFile, _writeFile as writeFile } from \"@xmcl/core\";\nimport { ChildProcessWithoutNullStreams, ExecOptions, spawn } from \"child_process\";\nimport { close as fclose, copyFile as fcopyFile, ftruncate, link as fslink, open as fopen, stat as fstat, unlink as funlink } from \"fs\";\nimport { dirname } from \"path\";\nimport { promisify } from \"util\";\n\nexport const unlink = promisify(funlink);\nexport const stat = promisify(fstat);\n\nexport const link = promisify(fslink);\n\nexport const open = promisify(fopen);\nexport const close = promisify(fclose);\nexport const copyFile = promisify(fcopyFile);\nexport const truncate = promisify(ftruncate);\n\nexport { checksum } from \"@xmcl/core\";\nexport { readFile, writeFile, mkdir, exists, pipeline };\n\nexport function missing(target: string) {\n    return exists(target).then((v) => !v);\n}\nexport async function ensureDir(target: string) {\n    try {\n        await mkdir(target);\n    } catch (err) {\n        const e: any = err;\n        if (await stat(target).then((s) => s.isDirectory()).catch(() => false)) { return; }\n        if (e.code === \"EEXIST\") { return; }\n        if (e.code === \"ENOENT\") {\n            if (dirname(target) === target) {\n                throw e;\n            }\n            try {\n                await ensureDir(dirname(target));\n                await mkdir(target);\n            } catch {\n                if (await stat(target).then((s) => s.isDirectory()).catch((e) => false)) { return; }\n                throw e;\n            }\n            return;\n        }\n        throw e;\n    }\n}\nexport function ensureFile(target: string) {\n    return ensureDir(dirname(target));\n}\nexport function normalizeArray<T>(arr: T | T[] = []): T[] {\n    return arr instanceof Array ? arr : [arr];\n}\nexport function spawnProcess(javaPath: string, args: string[], options?: ExecOptions) {\n    let process = spawn(javaPath, args, options);\n    return waitProcess(process);\n}\n\nexport function waitProcess(process: ChildProcessWithoutNullStreams) {\n    return new Promise<void>((resolve, reject) => {\n        let errorMsg: string[] = [];\n        process.on(\"error\", reject);\n        process.on(\"close\", (code) => {\n            if (code !== 0) { reject(errorMsg.join(\"\")); } else { resolve(); }\n        });\n        process.on(\"exit\", (code) => {\n            if (code !== 0) { reject(errorMsg.join(\"\")); } else { resolve(); }\n        });\n        process.stdout.setEncoding(\"utf-8\");\n        process.stdout.on(\"data\", (buf) => { });\n        process.stderr.setEncoding(\"utf-8\");\n        process.stderr.on(\"data\", (buf) => { errorMsg.push(buf.toString()) });\n    });\n}\n\n\nexport interface ParallelTaskOptions {\n    throwErrorImmediately?: boolean\n}\n/**\n * Shared install options\n */\nexport interface InstallOptions {\n    /**\n     * When you want to install a version over another one.\n     *\n     * Like, you want to install liteloader over a forge version.\n     * You should fill this with that forge version id.\n     */\n    inheritsFrom?: string;\n\n    /**\n     * Override the newly installed version id.\n     *\n     * If this is absent, the installed version id will be either generated or provided by installer.\n     */\n    versionId?: string;\n}\n\nexport function errorToString(e: any) {\n    if (e instanceof Error) {\n        return e.stack ? e.stack : e.message\n    }\n    return e.toString()\n}\n","import { createHash } from \"crypto\";\nimport { Agent as HttpAgent, ClientRequest, IncomingMessage, request, RequestOptions } from \"http\";\nimport { createReadStream } from \"fs\";\nimport { Agent as HttpsAgent, request as requests } from \"https\";\nimport { URL } from \"url\";\nimport { pipeline } from \"../utils\";\n\nexport function isValidProtocol(protocol: string | undefined | null): protocol is \"http:\" | \"https:\" {\n    return protocol === \"http:\" || protocol === \"https:\";\n}\n\nexport function urlToRequestOptions(url: URL): RequestOptions {\n    return {\n        host: url.host,\n        hostname: url.hostname,\n        protocol: url.protocol,\n        port: url.port,\n        path: url.pathname + url.search,\n    }\n}\n\nexport function format(url: RequestOptions) {\n    return `${url.protocol}//${url.host}${url.path}`\n}\n\nfunction mergeRequestOptions(original: RequestOptions, newOptions: RequestOptions) {\n    let options = { ...original } as any;\n    for (let [key, value] of Object.entries(newOptions)) {\n        if (value !== null) {\n            options[key] = value;\n        }\n    }\n    return options as RequestOptions;\n}\n\nexport function fetch(options: RequestOptions, agents: { http?: HttpAgent, https?: HttpsAgent } = {}) {\n    return new Promise<{ request: ClientRequest, message: IncomingMessage }>((resolve, reject) => {\n        function follow(options: RequestOptions) {\n            if (!isValidProtocol(options.protocol)) {\n                reject(new Error(`Invalid URL: ${format(options)}`));\n            } else {\n                let [req, agent] = options.protocol === \"http:\" ? [request, agents.http] : [requests, agents.https];\n                let clientReq = req({ ...options, agent }, (m) => {\n                    if ((m.statusCode === 302 || m.statusCode === 301 || m.statusCode === 303 || m.statusCode === 308) && typeof m.headers.location === \"string\") {\n                        m.resume();\n                        follow(mergeRequestOptions(options, urlToRequestOptions(new URL(m.headers.location, `${options.protocol}//${options.host}`))));\n                    } else {\n                        m.url = m.url || format(options);\n                        clientReq.removeListener(\"error\", reject);\n                        resolve({ request: clientReq, message: m });\n                    }\n                });\n                clientReq.addListener(\"error\", reject);\n                clientReq.end();\n            }\n        }\n        follow(options);\n    });\n}\n\n/**\n * Join two urls\n */\nexport function joinUrl(a: string, b: string) {\n    if (a.endsWith(\"/\") && b.startsWith(\"/\")) {\n        return a + b.substring(1);\n    }\n    if (!a.endsWith(\"/\") && !b.startsWith(\"/\")) {\n        return a + \"/\" + b;\n    }\n    return a + b;\n}\n\nexport async function checksumFromFd(fd: number, destination: string, algorithm: string) {\n    let hash = createHash(algorithm).setEncoding(\"hex\");\n    await pipeline(createReadStream(destination, { fd, autoClose: false }), hash);\n    return hash.read();\n}\n","import { Agents } from \"./agents\";\nimport { fetch, isValidProtocol, urlToRequestOptions } from \"./utils\";\nimport { URL } from \"url\";\n\nexport interface Timestamped {\n  timestamp: string;\n}\n\nexport interface FetchOptions {\n  method: \"GET\";\n  headers: Record<string, string | string[]>;\n}\n\nexport async function fetchText(url: string, agent?: Agents) {\n    let parsed = new URL(url);\n    if (!isValidProtocol(parsed.protocol)) {\n        throw new Error(`Invalid protocol ${parsed.protocol}`);\n    }\n    let { message: msg } = await fetch({\n        method: \"GET\",\n        ...urlToRequestOptions(parsed),\n        headers: {\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 Edg/80.0.361.48\",\n        },\n    }, agent);\n    let buf = await new Promise<Buffer>((resolve, reject) => {\n        let contents: any[] = [];\n        msg.on(\"data\", (chunk) => { contents.push(chunk); });\n        msg.on(\"end\", () => { resolve(Buffer.concat(contents)); });\n        msg.on(\"error\", reject)\n    });\n    return buf.toString();\n}\n\nexport async function fetchJson(url: string, agent?: Agents) {\n    return JSON.parse(await fetchText(url, agent));\n}\n\nexport async function getIfUpdate(url: string, timestamp?: string, agent: Agents = {}): Promise<{ timestamp: string; content: string | undefined }> {\n    let parsed = new URL(url);\n    if (!isValidProtocol(parsed.protocol)) {\n        throw new Error(`Invalid protocol ${parsed.protocol}`);\n    }\n    let { message: msg } = await fetch({\n        method: \"GET\",\n        ...urlToRequestOptions(parsed),\n        headers: {\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 Edg/80.0.361.48\",\n            \"If-Modified-Since\": timestamp ?? \"\",\n        },\n    }, agent);\n    let buf = await new Promise<Buffer>((resolve, reject) => {\n        let contents: any[] = [];\n        msg.on(\"data\", (chunk) => { contents.push(chunk); });\n        msg.on(\"end\", () => { resolve(Buffer.concat(contents)); });\n        msg.on(\"error\", reject)\n    })\n    let { statusCode, headers } = msg;\n    if (statusCode === 304) {\n        return {\n            timestamp: headers[\"last-modified\"]!,\n            content: undefined,\n        };\n    } else if (statusCode === 200 || statusCode === 204) {\n        return {\n            timestamp: headers[\"last-modified\"]!,\n            content: buf.toString(),\n        }\n    }\n    throw new Error(`Failure on response status code: ${statusCode}.`);\n}\n\nexport async function getAndParseIfUpdate<T extends Timestamped>(url: string, parser: (s: string) => any, lastObject: T | undefined): Promise<T> {\n    let { content, timestamp } = await getIfUpdate(url, lastObject?.timestamp);\n    if (content) { return { ...parser(content), timestamp, }; }\n    return lastObject!; // this cannot be undefined as the content be null only and only if the lastObject is presented.\n}\n\nexport async function getLastModified(url: string, timestamp: string | undefined, agent: Agents = {}) {\n    let parsed = new URL(url);\n    if (!isValidProtocol(parsed.protocol)) {\n        throw new Error(`Invalid protocol ${parsed.protocol}`);\n    }\n    let { message: msg } = await fetch({\n        method: \"HEAD\",\n        ...urlToRequestOptions(parsed),\n        headers: {\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 Edg/80.0.361.48\",\n            \"If-Modified-Since\": timestamp ?? \"\",\n        },\n    }, agent);\n    msg.resume();\n    let { headers, statusCode } = msg;\n    if (statusCode === 304) {\n        return [true, headers[\"last-modified\"]] as const;\n    } else if (statusCode === 200 || statusCode === 204) {\n        return [false, headers[\"last-modified\"]] as const;\n    }\n    throw new Error(`Failure on response status code: ${statusCode}.`);\n}\n","import { MinecraftFolder, MinecraftLocation, Version } from \"@xmcl/core\";\nimport { fetchJson, getLastModified, Timestamped } from \"./http/fetch\";\nimport { ensureFile, InstallOptions, writeFile } from \"./utils\";\n\nexport const YARN_MAVEN_URL = \"https://maven.fabricmc.net/net/fabricmc/yarn/maven-metadata.xml\";\nexport const LOADER_MAVEN_URL = \"https://maven.fabricmc.net/net/fabricmc/fabric-loader/maven-metadata.xml\";\n\n/**\n * Fabric Yarn version list\n * @see https://github.com/FabricMC/yarn\n */\nexport interface FabricYarnVersionList extends Timestamped {\n    versions: FabricArtifactVersion[];\n}\n\n/**\n * Fabric mod loader version list\n * @see https://fabricmc.net/\n */\nexport interface FabricLoaderVersionList extends Timestamped {\n    versions: FabricArtifactVersion[];\n}\n\nexport interface FabricArtifactVersion {\n    gameVersion?: string; // \"20w10a\",\n    separator?: string;\n    build?: number,\n    maven: string; // \"net.fabricmc:yarn:20w10a+build.7\",\n    version: string; // \"20w10a+build.7\",\n    stable: boolean;\n}\n\nexport interface FabricArtifacts {\n    mappings: FabricArtifactVersion[];\n    loader: FabricArtifactVersion[];\n}\n\nexport interface FabricLoaderArtifact {\n    loader: FabricArtifactVersion;\n    intermediary: FabricArtifactVersion;\n    launcherMeta: {\n        version: number;\n        libraries: {\n            client: { name: string; url: string; }[];\n            common: { name: string; url: string; }[];\n            server: { name: string; url: string; }[];\n        },\n        mainClass: {\n            client: string;\n            server: string;\n        };\n    };\n}\n\nexport const DEFAULT_FABRIC_API = \"https://meta.fabricmc.net/v2\";\n\n/**\n * Get all the artifacts provided by fabric\n * @param remote The fabric API host\n * @beta\n */\nexport function getFabricArtifacts(remote: string = DEFAULT_FABRIC_API): Promise<FabricArtifacts> {\n    return fetchJson(remote + \"/versions\");\n}\n/**\n * Get fabric-yarn artifact list\n * @param remote The fabric API host\n * @beta\n */\nexport function getYarnArtifactList(remote: string = DEFAULT_FABRIC_API): Promise<FabricArtifactVersion[]> {\n    return fetchJson(remote + \"/versions/yarn\");\n}\n/**\n * Get fabric-yarn artifact list by Minecraft version\n * @param minecraft The Minecraft version\n * @param remote The fabric API host\n * @beta\n */\nexport function getYarnArtifactListFor(minecraft: string, remote: string = DEFAULT_FABRIC_API): Promise<FabricArtifactVersion[]> {\n    return fetchJson(remote + \"/versions/yarn/\" + minecraft);\n}\n/**\n * Get fabric-loader artifact list\n * @param remote The fabric API host\n * @beta\n */\nexport function getLoaderArtifactList(remote: string = DEFAULT_FABRIC_API): Promise<FabricArtifactVersion[]> {\n    return fetchJson(remote + \"/versions/loader\");\n}\n/**\n * Get fabric-loader artifact list by Minecraft version\n * @param minecraft The minecraft version\n * @param remote The fabric API host\n * @beta\n */\nexport function getLoaderArtifactListFor(minecraft: string, remote: string = DEFAULT_FABRIC_API): Promise<FabricLoaderArtifact[]> {\n    return fetchJson(remote + \"/versions/loader/\" + minecraft);\n}\n/**\n * Get fabric-loader artifact list by Minecraft version\n * @param minecraft The minecraft version\n * @param loader The yarn-loader version\n * @param remote The fabric API host\n * @beta\n */\nexport function getFabricLoaderArtifact(minecraft: string, loader: string, remote: string = DEFAULT_FABRIC_API): Promise<FabricLoaderArtifact> {\n    return fetchJson(remote + \"/versions/loader/\" + minecraft + \"/\" + loader);\n}\n\n/**\n * Get or refresh the yarn version list.\n * @beta\n */\nexport async function getYarnVersionListFromXML(option: {\n    /**\n     * If this presents, it will send request with the original list timestamp.\n     *\n     * If the server believes there is no modification after the original one,\n     * it will directly return the orignal one.\n     */\n    original?: FabricYarnVersionList,\n    /**\n     * remote maven xml url of this request\n     */\n    remote?: string,\n} = {}): Promise<FabricYarnVersionList> {\n    let [modified, timestamp] = await getLastModified(YARN_MAVEN_URL, option.original?.timestamp);\n    if (modified || !option.original) {\n        let versions = await getYarnArtifactList(option.remote);\n        return {\n            versions: versions,\n            timestamp: timestamp ?? \"\",\n        };\n    }\n    return option.original;\n}\n\n/**\n * Get or refresh the fabric mod loader version list.\n * @beta\n */\nexport async function getLoaderVersionListFromXML(option: {\n    /**\n     * If this presents, it will send request with the original list timestamp.\n     *\n     * If the server believes there is no modification after the original one,\n     * it will directly return the orignal one.\n     */\n    original?: FabricLoaderVersionList,\n    /**\n     * remote maven xml url of this request\n     */\n    remote?: string,\n}): Promise<FabricLoaderVersionList> {\n    let [modified, timestamp] = await getLastModified(LOADER_MAVEN_URL, option.original?.timestamp);\n    if (modified || !option.original) {\n        let versions = await getLoaderArtifactList(option.remote);\n        return {\n            versions: versions,\n            timestamp: timestamp ?? \"\",\n        };\n    }\n    return option.original;\n}\n\n/**\n * Install the fabric to the client. Notice that this will only install the json.\n * You need to call `Installer.installDependencies` to get a full client.\n * @param yarnVersion The yarn version\n * @param loaderVersion The fabric loader version\n * @param minecraft The minecraft location\n * @returns The installed version id\n */\nexport async function installFabricYarnAndLoader(yarnVersion: string, loaderVersion: string, minecraft: MinecraftLocation, options: InstallOptions = {}) {\n    const folder = MinecraftFolder.from(minecraft);\n    const mcversion = yarnVersion.split(\"+\")[0];\n    const id = options.versionId || `${mcversion}-fabric${yarnVersion}-${loaderVersion}`;\n\n    const jsonFile = folder.getVersionJson(id);\n\n    const body: Version = await fetchJson(`https://fabricmc.net/download/technic/?yarn=${encodeURIComponent(yarnVersion)}&loader=${encodeURIComponent(loaderVersion)}`);\n    body.id = id;\n    if (typeof options.inheritsFrom === \"string\") {\n        body.inheritsFrom = options.inheritsFrom;\n    }\n    await ensureFile(jsonFile);\n    await writeFile(jsonFile, JSON.stringify(body));\n\n    return id;\n}\n\nexport interface FabricInstallOptions extends InstallOptions {\n    side?: \"client\" | \"server\";\n    yarnVersion?: string | FabricArtifactVersion;\n}\n\n/**\n * Generate fabric version json to the disk according to yarn and loader\n * @param side Client or server\n * @param yarnVersion The yarn version string or artifact\n * @param loader The loader artifact\n * @param minecraft The Minecraft Location\n * @param options The options\n * @beta\n */\nexport async function installFabric(loader: FabricLoaderArtifact, minecraft: MinecraftLocation, options: FabricInstallOptions = {}) {\n    const folder = MinecraftFolder.from(minecraft);\n\n    let yarn: string | undefined;\n    let side = options.side ?? \"client\";\n    let id = options.versionId;\n    let mcversion: string;\n    if (options.yarnVersion) {\n        let yarnVersion = options.yarnVersion;\n        if (typeof yarnVersion === \"string\") {\n            yarn = yarnVersion;\n            mcversion = yarn.split(\"+\")[0];\n        } else {\n            yarn = yarnVersion.version;\n            mcversion = yarnVersion.gameVersion || yarn.split(\"+\")[0];\n        }\n    } else {\n        mcversion = loader.intermediary.version;\n    }\n\n    if (!id) {\n        id = mcversion;\n        if (yarn) {\n            id += `-fabric${yarn}-loader${loader.loader.version}`;\n        } else {\n            id += `-fabric${loader.loader.version}`;\n        }\n    }\n    let libraries = [\n        { name: loader.loader.maven, url: \"https://maven.fabricmc.net/\" },\n        { name: loader.intermediary.maven, url: \"https://maven.fabricmc.net/\" },\n        ...(options.yarnVersion\n            ? [{ name: `net.fabricmc:yarn:${yarn}`, url: \"https://maven.fabricmc.net/\" }] : []),\n        ...loader.launcherMeta.libraries.common,\n        ...loader.launcherMeta.libraries[side],\n    ];\n    let mainClass = loader.launcherMeta.mainClass[side];\n    let inheritsFrom = options.inheritsFrom || mcversion;\n\n    let jsonFile = folder.getVersionJson(id);\n\n    await ensureFile(jsonFile);\n    await writeFile(jsonFile, JSON.stringify({\n        id,\n        inheritsFrom,\n        mainClass,\n        libraries,\n        arguments: {\n            game: [],\n            jvm: [],\n        },\n        releaseTime: new Date().toJSON(),\n        time: new Date().toJSON(),\n    }));\n\n    return id;\n}\n","import { MinecraftFolder, MinecraftLocation } from \"@xmcl/core\";\nimport { Task, task } from \"@xmcl/task\";\nimport { join } from \"path\";\nimport { getAndParseIfUpdate, Timestamped } from \"./http/fetch\";\nimport { ensureDir, InstallOptions, missing, readFile, writeFile } from \"./utils\";\n\nexport const DEFAULT_VERSION_MANIFEST = \"http://dl.liteloader.com/versions/versions.json\";\n/**\n * The liteloader version list. Containing the minecraft version -> liteloader version info mapping.\n */\nexport interface LiteloaderVersionList extends Timestamped {\n    meta: {\n        description: string,\n        authors: string,\n        url: string,\n        updated: string,\n        updatedTime: number,\n    };\n    versions: { [version: string]: { snapshot?: LiteloaderVersion, release?: LiteloaderVersion } };\n}\nfunction processLibraries(lib: { name: string, url?: string }) {\n    if (Object.keys(lib).length === 1 && lib.name) {\n        if (lib.name.startsWith(\"org.ow2.asm\")) {\n            lib.url = \"https://files.minecraftforge.net/maven/\";\n        }\n    }\n    return lib;\n}\nexport namespace LiteloaderVersionList {\n    export function parse(content: string) {\n        const result = JSON.parse(content);\n        const metalist = { meta: result.meta, versions: {} };\n        for (const mcversion in result.versions) {\n            const versions: { release?: LiteloaderVersion, snapshot?: LiteloaderVersion }\n                = (metalist.versions as any)[mcversion] = {};\n            const snapshots = result.versions[mcversion].snapshots;\n            const artifacts = result.versions[mcversion].artefacts; // that's right, artefact\n            const url = result.versions[mcversion].repo.url;\n            if (snapshots) {\n                const { stream, file, version, md5, timestamp, tweakClass, libraries } = snapshots[\"com.mumfrey:liteloader\"].latest;\n                const type = (stream === \"RELEASE\" ? \"RELEASE\" : \"SNAPSHOT\");\n                versions.snapshot = {\n                    url,\n                    type,\n                    file,\n                    version,\n                    md5,\n                    timestamp,\n                    mcversion,\n                    tweakClass,\n                    libraries: libraries.map(processLibraries),\n                };\n            }\n            if (artifacts) {\n                const { stream, file, version, md5, timestamp, tweakClass, libraries } = artifacts[\"com.mumfrey:liteloader\"].latest;\n                const type = (stream === \"RELEASE\" ? \"RELEASE\" : \"SNAPSHOT\");\n                versions.release = {\n                    url,\n                    type,\n                    file,\n                    version,\n                    md5,\n                    timestamp,\n                    mcversion,\n                    tweakClass,\n                    libraries: libraries.map(processLibraries),\n                };\n            }\n        }\n        return metalist;\n    }\n\n}\n\n/**\n * A liteloader remote version information\n */\nexport interface LiteloaderVersion {\n    version: string;\n    url: string;\n    file: string;\n    mcversion: string;\n    type: \"RELEASE\" | \"SNAPSHOT\";\n    md5: string;\n    timestamp: string;\n    libraries: Array<{ name: string, url?: string }>;\n    tweakClass: string;\n}\n\nconst snapshotRoot = \"http://dl.liteloader.com/versions/\";\nconst releaseRoot = \"http://repo.mumfrey.com/content/repositories/liteloader/\";\n\n/**\n * This error is only thrown from liteloader install currently.\n */\nexport class MissingVersionJsonError extends Error {\n    constructor(public version: string,\n        /**\n         * The path of version json\n         */\n        public path: string) {\n        super()\n    }\n    error: \"MissingVersionJson\" = \"MissingVersionJson\"\n\n}\n/**\n * Get or update the LiteLoader version list.\n *\n * This will request liteloader offical json by default. You can replace the request by assigning the remote option.\n */\nexport function getLiteloaderVersionList(option: {\n    /**\n     * If this presents, it will send request with the original list timestamp.\n     *\n     * If the server believes there is no modification after the original one,\n     * it will directly return the orignal one.\n     */\n    original?: LiteloaderVersionList;\n    /**\n     * The optional requesting version json url.\n     */\n    remote?: string;\n} = {}): Promise<LiteloaderVersionList> {\n    return getAndParseIfUpdate(option.remote || DEFAULT_VERSION_MANIFEST, LiteloaderVersionList.parse, option.original);\n}\n\n/**\n * Install the liteloader to specific minecraft location.\n *\n * This will install the liteloader amount on the corresponded Minecraft version by default.\n * If you want to install over the forge. You should first install forge and pass the installed forge version id to the third param,\n * like `1.12-forge-xxxx`\n *\n * @param versionMeta The liteloader version metadata.\n * @param location The minecraft location you want to install\n * @param version The real existed version id (under the the provided minecraft location) you want to installed liteloader inherit\n * @throws {@link MissingVersionJsonError}\n */\nexport function installLiteloader(versionMeta: LiteloaderVersion, location: MinecraftLocation, options?: InstallOptions) {\n    return installLiteloaderTask(versionMeta, location, options).startAndWait();\n}\n\n\nfunction buildVersionInfo(versionMeta: LiteloaderVersion, mountedJSON: any) {\n    const id = `${mountedJSON.id}-Liteloader${versionMeta.mcversion}-${versionMeta.version}`;\n    const time = new Date(Number.parseInt(versionMeta.timestamp, 10) * 1000).toISOString();\n    const releaseTime = time;\n    const type = versionMeta.type;\n    const libraries = [\n        {\n            name: `com.mumfrey:liteloader:${versionMeta.version}`,\n            url: type === \"SNAPSHOT\" ? snapshotRoot : releaseRoot,\n        },\n        ...versionMeta.libraries.map(processLibraries),\n    ];\n    const mainClass = \"net.minecraft.launchwrapper.Launch\";\n    const inheritsFrom = mountedJSON.id;\n    const jar = mountedJSON.jar || mountedJSON.id;\n    const info: any = {\n        id, time, releaseTime, type, libraries, mainClass, inheritsFrom, jar,\n    };\n    if (mountedJSON.arguments) {\n        // liteloader not supported for version > 1.12...\n        // just write this for exception\n        info.arguments = {\n            game: [\"--tweakClass\", versionMeta.tweakClass],\n            jvm: [],\n        };\n    } else {\n        info.minecraftArguments = `--tweakClass ${versionMeta.tweakClass} ` + mountedJSON.minecraftArguments;\n    }\n    return info;\n}\n\n\n/**\n * Install the liteloader to specific minecraft location.\n *\n * This will install the liteloader amount on the corresponded Minecraft version by default.\n * If you want to install over the forge. You should first install forge and pass the installed forge version id to the third param,\n * like `1.12-forge-xxxx`\n *\n * @tasks installLiteloader, installLiteloader.resolveVersionJson installLiteloader.generateLiteloaderJson\n *\n * @param versionMeta The liteloader version metadata.\n * @param location The minecraft location you want to install\n * @param version The real existed version id (under the the provided minecraft location) you want to installed liteloader inherit\n */\nexport function installLiteloaderTask(versionMeta: LiteloaderVersion, location: MinecraftLocation, options: InstallOptions = {}): Task<string> {\n    return task(\"installLiteloader\", async function installLiteloader() {\n        const mc: MinecraftFolder = MinecraftFolder.from(location);\n\n        const mountVersion = options.inheritsFrom || versionMeta.mcversion;\n\n        const mountedJSON: any = await this.yield(task(\"resolveVersionJson\", async function resolveVersionJson() {\n            if (await missing(mc.getVersionJson(mountVersion))) {\n                throw new MissingVersionJsonError(mountVersion, mc.getVersionJson(mountVersion));\n            }\n            return readFile(mc.getVersionJson(mountVersion)).then((b) => b.toString()).then(JSON.parse);\n        }));\n\n        const versionInf = await this.yield(task(\"generateLiteloaderJson\", async function generateLiteloaderJson() {\n            const inf = buildVersionInfo(versionMeta, mountedJSON);\n\n            inf.id = options.versionId || inf.id;\n            inf.inheritsFrom = options.inheritsFrom || inf.inheritsFrom;\n\n            const versionPath = mc.getVersionRoot(inf.id);\n\n            await ensureDir(versionPath);\n            await writeFile(join(versionPath, inf.id + \".json\"), JSON.stringify(inf, undefined, 4));\n\n            return inf;\n        }));\n        return versionInf.id as string;\n    });\n}\n","export interface AbortSignal {\n  readonly aborted: boolean\n  addEventListener(event: string, handler: () => void): this\n  removeEventListener(event: string, handler: () => void): this\n}\n\nexport function resolveAbortSignal(signal?: AbortSignal) {\n    if (signal) { return signal; }\n    return {\n        aborted: false,\n        addEventListener() { return this },\n        removeEventListener() { return this }\n    }\n}\n","import { Agent as HttpAgent } from \"http\";\nimport { Agent as HttpsAgent } from \"https\";\nimport { cpus } from \"os\";\n/**\n * The http(s) agents object for requesting\n */\nexport interface Agents {\n  http?: HttpAgent;\n  https?: HttpsAgent;\n}\n\nexport interface CreateAgentsOptions {\n  /**\n   * The suggested max concurrency of the download. This is not a strict criteria.\n   *\n   * This is used to generate the `agents` maxSocket.\n   * If `agents` is assigned, this will be ignore.\n   */\n  maxSocket?: number;\n  /**\n   * The suggested max concurrency of the download. This is not a strict criteria.\n   *\n   * This is used to generate the `agents` maxFreeSocket.\n   * If `agents` is assigned, this will be ignore.\n   */\n  maxFreeSocket?: number;\n}\n\nexport function isAgents(agents?: Agents | CreateAgentsOptions): agents is Agents {\n    if (!agents) { return false; }\n    return \"http\" in agents || \"https\" in agents;\n}\n\nexport function resolveAgents(agents?: Agents | CreateAgentsOptions): Agents {\n    if (isAgents(agents)) { return agents; }\n    return createAgents(agents);\n}\n\n/**\n * Default create agents object\n */\nexport function createAgents(options: CreateAgentsOptions = {}) {\n    return {\n        http: new HttpAgent({\n            maxSockets: options.maxSocket ?? cpus().length * 4,\n            maxFreeSockets: options.maxFreeSocket ?? 64,\n            keepAlive: true,\n        }),\n        https: new HttpsAgent({\n            maxSockets: options.maxSocket ?? cpus().length * 4,\n            maxFreeSockets: options.maxFreeSocket ?? 64,\n            keepAlive: true,\n        })\n    };\n}\n\nexport async function withAgents<T extends { agents?: Agents | CreateAgentsOptions }, R>(options: T, scope: (options: T) => R) {\n    if (!isAgents(options.agents)) {\n        const agents = resolveAgents(options.agents);\n        try {\n            const r = await scope({ ...options, agents });\n            return r;\n        } finally {\n            agents.http?.destroy();\n            agents.https?.destroy();\n        }\n    } else {\n        return scope(options);\n    }\n}\n","import { ResourceMetadata } from \"./metadata\";\nimport { Segment } from \"./segment\";\n\nexport type DownloadFailedReason = \"DownloadAborted\" | \"DownloadValidationFailed\" | \"GeneralDownloadException\" | NetworkErrorType\n\n/**\n * Download\n */\nexport class DownloadError extends Error {\n    constructor(\n        readonly error: DownloadFailedReason,\n        readonly metadata: ResourceMetadata | undefined,\n        readonly headers: Record<string, any>,\n        readonly destination: string,\n        readonly segments: Segment[],\n        readonly segmentErrors: any[]\n    ) {\n        super(`The download failed! ${error}`);\n    }\n}\n\nexport type NetworkErrorType = \"ConnectionReset\" | \"ConnectionTimeout\" | \"OperationCancelled\" | \"ProtocolError\"\n\nexport function resolveNetworkErrorType(e: any): NetworkErrorType | undefined {\n    if (e.code === \"ECONNRESET\") { return \"ConnectionReset\"; }\n    if (e.code === \"ETIMEDOUT\") { return \"ConnectionTimeout\"; }\n    if (e.code === \"EPROTO\") { return \"ProtocolError\"; }\n    if (e.code === \"ECANCELED\") { return \"OperationCancelled\"; }\n}\n\n/**\n * A simple util function to determine if this is a common network condition error.\n * @param e Error object\n */\nexport function isCommonNetworkError(e: any) {\n    if (typeof e.code === \"string\") {\n        return e.code === \"ECONNRESET\"\n            || e.code === \"ETIMEDOUT\"\n            || e.code === \"EPROTO\"\n            || e.code === \"ECANCELED\";\n    }\n    return false\n}\n","import { Agents } from \"./agents\";\nimport { URL } from \"url\";\nimport fetch from \"electron-fetch\";\n\nexport interface ResourceMetadata {\n  url: URL\n  isAcceptRanges: boolean\n  contentLength: number\n  lastModified: string | undefined\n  eTag: string | undefined\n}\n\nexport class FetchMetadataError extends Error {\n    constructor(\n    readonly error: \"FetchResourceNotFound\" | \"BadResourceRequest\" | \"FetchResourceServerUnavaiable\",\n    readonly statusCode: number,\n    readonly url: string,\n    message: string,\n    ) {\n        super(message)\n    }\n}\n\nexport async function getMetadata(srcUrl: URL, _headers: Record<string, any>, agents: Agents, useGet: boolean = false): Promise<ResourceMetadata> {\n    const res = await fetch(srcUrl, {\n        method: useGet ? \"GET\" : \"HEAD\",\n        headers: _headers\n    }, agents);\n\n    const statusCode = res.status ?? 500;\n    if (statusCode === 405 && !useGet) {\n        return getMetadata(srcUrl, _headers, agents, useGet);\n    }\n    if (statusCode !== 200 && statusCode !== 201) {\n        throw new FetchMetadataError(\n            statusCode === 404 ? \"FetchResourceNotFound\"\n                : statusCode >= 500 ? \"FetchResourceServerUnavaiable\"\n                    : \"BadResourceRequest\",\n            statusCode,\n            srcUrl.toString(),\n            `Fetch download metadata failed due to http error. Status code: ${statusCode} on ${srcUrl.toString()}`)\n    }\n    const url = srcUrl;\n    const isAcceptRanges = res.headers?.get[\"accept-ranges\"] === \"bytes\";\n    const contentLength = res.headers?.get[\"content-length\"] ? Number.parseInt(res.headers?.get[\"content-length\"]) : -1;\n    const lastModified = res.headers?.get[\"last-modified\"] ?? undefined;\n    const eTag = res.headers?.get.etag ;\n\n    return {\n        url,\n        isAcceptRanges,\n        contentLength,\n        lastModified,\n        eTag,\n    }\n}\n","import { DownloadError, isCommonNetworkError } from \"./error\";\nimport { ValidationError } from \"./validator\";\n\n/**\n * The handler that decide whether\n */\nexport interface RetryHandler {\n  retry(url: string, attempt: number, error: ValidationError): boolean | Promise<boolean>;\n  retry(url: string, attempt: number, error: DownloadError): boolean | Promise<boolean>;\n  /**\n   * You should decide whether we should retry the download again?\n   *\n   * @param url The current downloading url\n   * @param attempt How many time it try to retry download? The first retry will be `1`.\n   * @param error The error object thrown during this download. It can be {@link DownloadError} or ${@link ValidationError}.\n   * @returns If we should retry and download it again.\n   */\n  retry(url: string, attempt: number, error: any): boolean | Promise<boolean>;\n}\n\nexport interface DefaultRetryHandlerOptions {\n  /**\n   * The max retry count\n   */\n  maxRetryCount?: number\n  /**\n   * Should we retry on the error\n   */\n  shouldRetry?: (e: any) => boolean\n}\n\nexport function isRetryHandler(options?: DefaultRetryHandlerOptions | RetryHandler): options is RetryHandler {\n    if (!options) { return false; }\n    return \"retry\" in options && typeof options.retry === \"function\";\n}\n\n\nexport function resolveRetryHandler(options?: DefaultRetryHandlerOptions | RetryHandler): RetryHandler {\n    if (isRetryHandler(options)) { return options; }\n    return createRetryHandler(options?.maxRetryCount ?? 3, options?.shouldRetry ?? isCommonNetworkError)\n}\n\n/**\n * Create a simple count based retry handler\n * @param maxRetryCount The max count we should try\n * @param shouldRetry Should the error be retry\n */\nexport function createRetryHandler(maxRetryCount: number, shouldRetry: (e: any) => boolean) {\n    const handler: RetryHandler = {\n        retry(url, attempt, error) {\n            return shouldRetry(error) && attempt < maxRetryCount\n        }\n    }\n    return handler;\n}\n","export interface Segment {\n    start: number;\n    end: number;\n}\n\nexport interface SegmentPolicy {\n    computeSegments(contentLength: number): Segment[]\n}\n\nexport function isSegmentPolicy(segmentOptions?: SegmentPolicy | DefaultSegmentPolicyOptions): segmentOptions is SegmentPolicy {\n    if (!segmentOptions) { return false; }\n    return \"computeSegments\" in segmentOptions && typeof segmentOptions.computeSegments === \"function\"\n}\n\nexport function resolveSegmentPolicy(segmentOptions?: SegmentPolicy | DefaultSegmentPolicyOptions) {\n    if (isSegmentPolicy(segmentOptions)) {\n        return segmentOptions;\n    }\n    return new DefaultSegmentPolicy(segmentOptions?.segmentThreshold ?? 2 * 1000000, 4);\n}\n\nexport interface DefaultSegmentPolicyOptions {\n    /**\n     * The minimum bytes a segment should have.\n     * @default 2MB\n     */\n    segmentThreshold?: number;\n}\n\nexport class DefaultSegmentPolicy implements SegmentPolicy {\n    constructor(readonly segmentThreshold: number, readonly concurrency: number) { }\n\n    computeSegments(total: number): Segment[] {\n        const { segmentThreshold: chunkSize, concurrency } = this;\n        const partSize = Math.max(chunkSize, Math.floor(total / concurrency));\n        const segments: Segment[] = [];\n        for (let cur = 0, chunkSize = 0; cur < total; cur += chunkSize) {\n            const remain = total - cur;\n            if (remain >= partSize) {\n                chunkSize = partSize;\n                segments.push({ start: cur, end: cur + chunkSize - 1 });\n            } else {\n                const last = segments[segments.length - 1];\n                if (!last) {\n                    segments.push({ start: 0, end: remain - 1 });\n                } else {\n                    last.end = last.end + remain;\n                }\n                cur = total;\n            }\n        }\n        return segments;\n    }\n}\n","/**\n * The controller that maintain the download status\n */\nexport interface StatusController {\n  readonly total: number\n  readonly progress: number\n  reset(progress: number, total: number): void\n  onProgress(chunkSize: number, progress: number): void\n}\n\nexport function createStatusController() {\n    let total = 0\n    let progress = 0\n    const controller: StatusController = {\n        get total() { return total },\n        get progress() { return progress },\n        reset(_progress, _total) { progress = _progress; total = _total },\n        onProgress(_, _progress) { progress = _progress }\n    }\n    return controller;\n}\n\nexport function resolveStatusController(controller?: StatusController) {\n    if (!controller) { return createStatusController() }\n    return controller\n}\n","import { checksum } from \"@xmcl/core\";\nimport { open } from \"@xmcl/unzip\";\nimport { createReadStream } from \"fs\";\n\nexport interface Validator {\n    /**\n     * Validate the download result. It should throw `ValidationError` if validation failed.\n     *\n     * @param fd The file desciprtor\n     * @param destination The result file\n     * @param url The url where the file downloaded from\n     */\n    validate(fd: number, destination: string, url: string): Promise<void>\n}\n\nexport class ChecksumValidator implements Validator {\n    constructor(protected checksum?: ChecksumValidatorOptions) { }\n\n    async validate(fd: number, destination: string, url: string): Promise<void> {\n        if (this.checksum) {\n            const actual = await checksum(destination, this.checksum.algorithm);\n            const expect = this.checksum.hash;\n            if (actual !== expect) {\n                throw new ChecksumNotMatchError(this.checksum.algorithm, this.checksum.hash, actual, destination, url);\n            }\n        }\n    }\n}\n\nexport function isValidator(options?: Validator | ChecksumValidatorOptions): options is Validator {\n    if (!options) { return false; }\n    return \"validate\" in options && typeof options.validate === \"function\"\n}\n\nexport function resolveValidator(options?: ChecksumValidatorOptions | Validator): Validator {\n    if (isValidator(options)) { return options; }\n    if (options) {\n        return new ChecksumValidator({ hash: options.hash, algorithm: options.algorithm })\n    }\n    return { validate() { return Promise.resolve() } }\n}\n\nexport interface ChecksumValidatorOptions {\n    algorithm: string;\n    hash: string;\n}\n\nexport class ZipValidator implements Validator {\n    async validate(fd: number, destination: string, url: string): Promise<void> {\n        try {\n            const file = await open(fd)\n            file.close();\n        } catch (e) {\n            throw new ValidationError(\"InvalidZipError\", (e as any).message)\n        }\n    }\n}\n\nexport class JsonValidator implements Validator {\n    validate(fd: number, destination: string, url: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const read = createReadStream(destination, {\n                fd,\n                autoClose: false,\n                emitClose: true,\n            });\n            let content = \"\"\n            read.on(\"data\", (buf) => {\n                content += buf.toString();\n            })\n            read.on(\"end\", () => {\n                try {\n                    JSON.parse(content)\n                    resolve()\n                } catch (e) {\n                    reject(e)\n                }\n            })\n        })\n    }\n\n}\n\nexport class ValidationError extends Error {\n    constructor(readonly error: string, message?: string) { super(message); }\n}\n\nexport class ChecksumNotMatchError extends ValidationError {\n    constructor(readonly algorithm: string, readonly expect: string, readonly actual: string, readonly file: string, readonly source?: string) {\n        super(\"ChecksumNotMatchError\", source ? `File ${file} (${source}) ${algorithm} checksum not match. Expect: ${expect}. Actual: ${actual}.` : `File ${file} ${algorithm} checksum not match. Expect: ${expect}. Actual: ${actual}.`);\n    }\n}\n","import { O_CREAT, O_RDWR } from \"constants\";\nimport { createWriteStream, fdatasync, fstat } from \"fs\";\nimport { RequestOptions } from \"http\";\nimport { fileURLToPath, URL } from \"url\";\nimport { promisify } from \"util\";\nimport { close, copyFile, ensureFile, exists, open, pipeline, truncate, unlink } from \"../utils\";\nimport { AbortSignal, resolveAbortSignal } from \"./abort\";\nimport { Agents, CreateAgentsOptions, resolveAgents } from \"./agents\";\nimport { DownloadError, resolveNetworkErrorType } from \"./error\";\nimport { getMetadata, ResourceMetadata } from \"./metadata\";\nimport { DefaultRetryHandlerOptions, resolveRetryHandler, RetryHandler } from \"./retry\";\nimport { DefaultSegmentPolicyOptions, resolveSegmentPolicy, Segment, SegmentPolicy } from \"./segment\";\nimport { resolveStatusController, StatusController } from \"./status\";\nimport { fetch, urlToRequestOptions } from \"./utils\";\nimport { ChecksumValidatorOptions, resolveValidator, ValidationError, Validator } from \"./validator\";\n\n// @ts-ignore\nconst pfstat = promisify(fstat)\nconst pfdatasync = promisify(fdatasync)\n\nexport interface DownloadBaseOptions {\n    /**\n     * The agent of the request\n     */\n    agents?: Agents | CreateAgentsOptions;\n    /**\n     * The divide segment options\n     */\n    segmentPolicy?: SegmentPolicy | DefaultSegmentPolicyOptions;\n    /**\n     * The retry handler\n     */\n    retryHandler?: RetryHandler | DefaultRetryHandlerOptions;\n    /**\n     * The header of the request\n     */\n    headers?: Record<string, any>;\n}\n\nexport interface DownloadOptions extends DownloadBaseOptions {\n    /**\n     * The url or urls (fallback) of the resource\n     */\n    url: string | string[];\n    /**\n     * The header of the request\n     */\n    headers?: Record<string, any>;\n    /**\n     * If the download is aborted, and want to recover, you can use this option to recover the download\n     */\n    segments?: Segment[];\n    /**\n     * If the download is aborted, and want to recover, you can use this option to recover the download\n     */\n    metadata?: ResourceMetadata;\n    /**\n     * Where the file will be downloaded to\n     */\n    destination: string;\n    /**\n     * The status controller. If you want to track download progress, you should use this.\n     */\n    statusController?: StatusController;\n    /**\n     * The validator, or the options to create a validator based on checksum.\n     */\n    validator?: Validator | ChecksumValidatorOptions;\n}\n\nclass AbortError extends Error { }\n\n/**\n * Download url or urls to a file path. This process is abortable, it's compatible with the dom like `AbortSignal`.\n */\nexport function download(options: DownloadOptions) {\n    const worker = createDownload(options);\n    return worker.start();\n}\n\nexport function createDownload(options: DownloadOptions) {\n    return new Download(\n        typeof options.url === \"string\" ? [options.url] : options.url,\n        options.headers ?? {},\n        resolveAgents(options.agents),\n        options.destination,\n        options.segments,\n        options.metadata,\n        resolveSegmentPolicy(options.segmentPolicy),\n        resolveStatusController(options.statusController),\n        resolveRetryHandler(options.retryHandler),\n        resolveValidator(options.validator),\n    );\n}\n\nexport class Download {\n    /**\n     * current fd\n     */\n    protected fd: number = -1;\n\n    constructor(\n        /**\n         * The original request url with fallback\n         */\n        readonly urls: string[],\n        /**\n         * The headers of the request\n         */\n        readonly headers: Record<string, any>,\n        /**\n         * The agent of the request\n         */\n        readonly agents: Agents,\n        /**\n         * Where the file download to\n         */\n        readonly destination: string,\n        /**\n        * The current download status\n        */\n        protected segments: Segment[] = [],\n        /**\n         * The cached resource metadata\n         */\n        protected metadata: ResourceMetadata | undefined,\n        protected segmentPolicy: SegmentPolicy,\n        protected statusController: StatusController,\n        protected retryHandler: RetryHandler,\n        protected validator: Validator,\n    ) { }\n\n    protected async updateMetadata(url: URL) {\n        const metadata = await getMetadata(url, this.headers, this.agents);\n        if (!metadata || metadata.eTag != this.metadata?.eTag || metadata.eTag === undefined || metadata.contentLength !== this.metadata?.contentLength) {\n            this.metadata = metadata;\n            const contentLength = metadata.contentLength;\n            this.segments = contentLength && metadata.isAcceptRanges\n                ? this.segmentPolicy.computeSegments(contentLength)\n                : [{ start: 0, end: contentLength }];\n            this.statusController.reset(0, metadata.contentLength);\n            await truncate(this.fd, metadata.contentLength);\n        } else {\n            this.statusController.reset(this.segments.reduce((a, b) => a + (b.end - b.start), 0), metadata.contentLength);\n        }\n        return this.metadata\n    }\n\n    protected async processDownload(metadata: ResourceMetadata, abortSignal: AbortSignal): Promise<void> {\n        let flag = 0;\n        const abortHandlers: Array<() => void> = [];\n        const errors: any[] = []\n        await Promise.all(this.segments.map(async (segment, index) => {\n            if (segment.start > segment.end) {\n                // the segment is finished, just ignore it\n                return;\n            }\n            const options: RequestOptions = {\n                ...urlToRequestOptions(metadata.url),\n                method: \"GET\",\n                headers: {\n                    ...this.headers,\n                    Range: `bytes=${segment.start}-${(segment.end) ?? \"\"}`,\n                },\n            };\n            try {\n                if (abortSignal.aborted || flag) { throw new AbortError(); }\n                const { message: response, request } = await fetch(options, this.agents);\n                if (abortSignal.aborted || flag) {\n                    // ensure we correctly release the message\n                    response.resume();\n                    throw new AbortError();\n                }\n                const fileStream = createWriteStream(this.destination, {\n                    fd: this.fd,\n                    start: segment.start,\n                    // we should not close the file stream, as it will close the fd as the same time!\n                    autoClose: false,\n                });\n                // track the progress\n                response.on(\"data\", (chunk) => {\n                    segment.start += chunk.length;\n                    this.statusController.onProgress(chunk.length, this.statusController.progress + chunk.length);\n                });\n                // create abort handler\n                const abortHandler = () => {\n                    request.destroy(new AbortError());\n                    response.unpipe();\n                }\n                abortHandlers.push(abortHandler)\n                // add abort handler to abort signal\n                abortSignal.addEventListener(\"abort\", abortHandler);\n                await pipeline(response, fileStream);\n                abortSignal.removeEventListener(\"abort\", abortHandler);\n            } catch (e) {\n                if (e instanceof AbortError || (e as any).message === \"aborted\") {\n                    // user abort the operation, or abort by other sibling error\n                    if (flag === 0) { flag = 1; }\n                } else {\n                    // true error thrown.\n                    flag = 2;\n                    // all other sibling requests should be aborted\n                    abortHandlers.forEach((f) => f());\n                    errors.push(e);\n                }\n            }\n        }))\n        // use local aborted flag instead of signal.aborted\n        // as local aborted flag means the request is TRUELY aborted\n        if (flag) {\n            throw new DownloadError(flag === 1 ? \"DownloadAborted\" : resolveNetworkErrorType(errors[0]) ?? \"GeneralDownloadException\",\n                this.metadata,\n                this.headers,\n                this.destination,\n                this.segments,\n                errors,\n            );\n        }\n    }\n\n    protected async downloadUrl(url: string, abortSignal: AbortSignal) {\n        let attempt = 0;\n        const parsedUrl = new URL(url);\n        if (parsedUrl.protocol === \"file:\") {\n            const filePath = fileURLToPath(url);\n            if (await exists(filePath)) {\n                // properly handle the file protocol. we just copy the file\n                // luckly, opening file won't affect file copy 😀\n                await copyFile(fileURLToPath(url), this.destination);\n                return;\n            }\n        }\n        while (true) {\n            try {\n                attempt += 1;\n                const metadata = await this.updateMetadata(parsedUrl);\n                await this.processDownload(metadata, abortSignal);\n                return;\n            } catch (e) {\n                // user abort should throw anyway\n                if (e instanceof DownloadError && e.error === \"DownloadAborted\") {\n                    throw e;\n                }\n                // some common error we want to retry\n                if (await this.retryHandler.retry(url, attempt, e)) {\n                    continue;\n                }\n\n                const networkError = resolveNetworkErrorType(e);\n                if (networkError) {\n                    throw new DownloadError(networkError,\n                        this.metadata,\n                        this.headers,\n                        this.destination,\n                        this.segments,\n                        [e],\n                    );\n                }\n\n                throw e;\n            }\n        }\n    }\n\n    /**\n     * Start to download\n     */\n    async start(abortSignal: AbortSignal = resolveAbortSignal()) {\n        try {\n            if (this.fd === -1) {\n                await ensureFile(this.destination);\n                // use O_RDWR for read write which won't be truncated\n                this.fd = await open(this.destination, O_RDWR | O_CREAT);\n            }\n\n            // prevalidate the file\n            const size = (await pfstat(this.fd)).size\n            if (size !== 0) {\n                const error = await this.validator.validate(this.fd, this.destination, this.urls[0]).catch((e) => e);\n                // if the file size is not 0 and checksum matched, we just don't process the file\n                if (!error) {\n                    return;\n                }\n            }\n\n            let succeed = false\n            const aggregatedErrors: any[] = [];\n            for (const url of this.urls) {\n                try {\n                    await this.downloadUrl(url, abortSignal);\n                    await pfdatasync(this.fd);\n                    await this.validator.validate(this.fd, this.destination, url)\n                    succeed = true\n                    break;\n                } catch (e) {\n                    if (e instanceof DownloadError && e.error === \"DownloadAborted\") {\n                        throw e;\n                    }\n                    aggregatedErrors.push(e)\n                }\n            }\n            if (!succeed && aggregatedErrors.length > 0) {\n                throw aggregatedErrors;\n            }\n        } catch (e) {\n            const errs: any[] = e instanceof Array ? e : [e]\n\n            const lastError = errs[0];\n            if (!(lastError instanceof DownloadError) && !(lastError instanceof ValidationError)) {\n                await unlink(this.destination).catch(() => { });\n            }\n\n            throw e;\n        } finally {\n            if (this.fd !== -1) { await close(this.fd).catch(() => { }); }\n            this.fd = -1;\n        }\n    }\n}\n","import { AbortableTask } from \"@xmcl/task\";\nimport { AbortSignal } from \"./http/abort\";\nimport { createDownload, Download, DownloadOptions } from \"./http/download\";\nimport { DownloadError } from \"./http/error\";\nimport { StatusController } from \"./http/status\";\n\nexport class DownloadTask extends AbortableTask<void> implements StatusController {\n  readonly download: Download;\n  protected abort: (isCancelled: boolean) => void = () => { };\n\n  constructor(options: DownloadOptions) {\n      super();\n      options.statusController = this;\n      this.download = createDownload(options);\n  }\n\n  reset(progress: number, total: number): void {\n      this._progress = progress;\n      this._total = total;\n  }\n\n  onProgress(chunkSize: number, progress: number): void {\n      this._progress = progress;\n      this.update(chunkSize);\n  }\n\n  protected process(): Promise<void> {\n      const listeners: Array<() => void> = []\n      const aborted = () => this.isCancelled || this.isPaused\n      const signal: AbortSignal = {\n          get aborted() { return aborted() },\n          addEventListener(event, listener) {\n              if (event !== \"abort\") {\n                  return this;\n              }\n              listeners.push(listener);\n              return this;\n          },\n          removeEventListener(event, listener) {\n              // noop as this will be auto gc\n              return this;\n          }\n      }\n      this.abort = () => {\n          listeners.forEach((l) => l())\n      }\n      return this.download.start(signal);\n  }\n\n  protected isAbortedError(e: any): boolean {\n      if (e instanceof Array) { e = e[0] }\n      if (e instanceof DownloadError && e.error === \"DownloadAborted\") {\n          return true;\n      }\n      return false;\n  }\n}\n","import { MinecraftFolder, MinecraftLocation, ResolvedLibrary, ResolvedVersion, Version as VersionJson } from \"@xmcl/core\";\nimport { task, Task } from \"@xmcl/task\";\nimport { join } from \"path\";\nimport { withAgents } from \"./http/agents\";\nimport { DownloadTask } from \"./downloadTask\";\nimport { DownloadBaseOptions } from \"./http/download\";\nimport { getAndParseIfUpdate, Timestamped } from \"./http/fetch\";\nimport { joinUrl } from \"./http/utils\";\nimport { ensureDir, errorToString, normalizeArray, ParallelTaskOptions, readFile } from \"./utils\";\nimport { JsonValidator, ZipValidator } from \"./http/validator\";\n\n/**\n * The function to swap library host.\n */\nexport type LibraryHost = (library: ResolvedLibrary) => string | string[] | undefined;\n\nexport interface MinecraftVersionBaseInfo {\n    /**\n     * The version id, like 1.14.4\n     */\n    id: string;\n    /**\n     * The version json download url\n     */\n    url: string;\n}\n\n/**\n * The version metadata containing the version information, like download url\n */\nexport interface MinecraftVersion extends MinecraftVersionBaseInfo {\n    /**\n     * The version id, like 1.14.4\n     */\n    id: string;\n    type: string;\n    time: string;\n    releaseTime: string;\n    /**\n     * The version json download url\n     */\n    url: string;\n}\n\nexport interface AssetInfo {\n    name: string;\n    hash: string;\n    size: number;\n}\n\n/**\n * Minecraft version metadata list\n */\nexport interface MinecraftVersionList extends Timestamped {\n    latest: {\n        /**\n         * Snapshot version id of the Minecraft\n         */\n        snapshot: string\n        /**\n         * Release version id of the Minecraft, like 1.14.2\n         */\n        release: string,\n    };\n    /**\n     * All the vesrsion list\n     */\n    versions: MinecraftVersion[];\n}\n\n/**\n * Default minecraft version manifest url.\n */\nexport const DEFAULT_VERSION_MANIFEST_URL = \"https://launchermeta.mojang.com/mc/game/version_manifest.json\";\n/**\n * Default resource/assets url root\n */\nexport const DEFAULT_RESOURCE_ROOT_URL = \"https://resources.download.minecraft.net\";\n\n/**\n * Get and update the version list.\n * This try to send http GET request to offical Minecraft metadata endpoint by default.\n * You can swap the endpoint by passing url on `remote` in option.\n *\n * @returns The new list if there is\n */\nexport function getVersionList(option: {\n    /**\n     * If this presents, it will send request with the original list timestamp.\n     *\n     * If the server believes there is no modification after the original one,\n     * it will directly return the orignal one.\n     */\n    original?: MinecraftVersionList,\n    /**\n     * remote url of this request\n     */\n    remote?: string,\n} = {}): Promise<MinecraftVersionList> {\n    return getAndParseIfUpdate(option.remote || DEFAULT_VERSION_MANIFEST_URL, JSON.parse, option.original);\n}\n\n/**\n * Change the library host url\n */\nexport interface LibraryOptions extends DownloadBaseOptions, ParallelTaskOptions {\n    /**\n     * A more flexiable way to control library download url.\n     * @see mavenHost\n     */\n    libraryHost?: LibraryHost;\n    /**\n     * The alterative maven host to download library. It will try to use these host from the `[0]` to the `[maven.length - 1]`\n     */\n    mavenHost?: string | string[];\n    /**\n     * Control how many libraries download task should run at the same time.\n     * It will override the `maxConcurrencyOption` if this is presented.\n     *\n     * This will be ignored if you have your own downloader assigned.\n     */\n    librariesDownloadConcurrency?: number;\n}\n/**\n * Change the host url of assets download\n */\nexport interface AssetsOptions extends DownloadBaseOptions, ParallelTaskOptions {\n    /**\n     * The alternative assets host to download asset. It will try to use these host from the `[0]` to the `[assetsHost.length - 1]`\n     */\n    assetsHost?: string | string[];\n    /**\n     * Control how many assets download task should run at the same time.\n     * It will override the `maxConcurrencyOption` if this is presented.\n     *\n     * This will be ignored if you have your own downloader assigned.\n     */\n    assetsDownloadConcurrency?: number;\n\n    /**\n     * The assets index download or url replacement\n     */\n    assetsIndexUrl?: string | string[] | ((version: ResolvedVersion) => string | string[]);\n}\n\nexport type InstallLibraryVersion = Pick<ResolvedVersion, \"libraries\" | \"minecraftDirectory\">;\n\nfunction resolveDownloadUrls<T>(original: string, version: T, option?: string | string[] | ((version: T) => string | string[])) {\n    let result = [original];\n    if (typeof option === \"function\") {\n        result.unshift(...normalizeArray(option(version)));\n    } else {\n        result.unshift(...normalizeArray(option));\n    }\n    return result;\n}\n/**\n * Replace the minecraft client or server jar download\n */\nexport interface JarOption extends DownloadBaseOptions, ParallelTaskOptions {\n    /**\n     * The version json url replacement\n     */\n    json?: string | string[] | ((version: MinecraftVersionBaseInfo) => string | string[]);\n    /**\n     * The client jar url replacement\n     */\n    client?: string | string[] | ((version: ResolvedVersion) => string | string[]);\n    /**\n     * The server jar url replacement\n     */\n    server?: string | string[] | ((version: ResolvedVersion) => string | string[]);\n}\n\nexport interface InstallSideOption {\n    /**\n     * The installation side\n     */\n    side?: \"client\" | \"server\";\n}\n\n\nexport type Options = DownloadBaseOptions & ParallelTaskOptions & AssetsOptions & JarOption & LibraryOptions & InstallSideOption;\n\n/**\n * Install the Minecraft game to a location by version metadata.\n *\n * This will install version json, version jar, and all dependencies (assets, libraries)\n *\n * @param versionMeta The version metadata\n * @param minecraft The Minecraft location\n * @param option\n */\nexport async function install(versionMeta: MinecraftVersionBaseInfo, minecraft: MinecraftLocation, option: Options = {}): Promise<ResolvedVersion> {\n    return installTask(versionMeta, minecraft, option).startAndWait();\n}\n\n/**\n * Only install the json/jar. Do not install dependencies.\n *\n * @param versionMeta the version metadata; get from updateVersionMeta\n * @param minecraft minecraft location\n */\nexport function installVersion(versionMeta: MinecraftVersionBaseInfo, minecraft: MinecraftLocation, options: JarOption = {}): Promise<ResolvedVersion> {\n    return installVersionTask(versionMeta, minecraft, options).startAndWait();\n}\n\n/**\n * Install the completeness of the Minecraft game assets and libraries on a existed version.\n *\n * @param version The resolved version produced by Version.parse\n * @param minecraft The minecraft location\n */\nexport function installDependencies(version: ResolvedVersion, options?: Options): Promise<ResolvedVersion> {\n    return installDependenciesTask(version, options).startAndWait();\n}\n\n/**\n * Install or check the assets to resolved version\n *\n * @param version The target version\n * @param options The option to replace assets host url\n */\nexport function installAssets(version: ResolvedVersion, options: AssetsOptions = {}): Promise<ResolvedVersion> {\n    return installAssetsTask(version, options).startAndWait();\n}\n\n/**\n * Install all the libraries of providing version\n * @param version The target version\n * @param options The library host swap option\n */\nexport function installLibraries(version: ResolvedVersion, options: LibraryOptions = {}): Promise<void> {\n    return installLibrariesTask(version, options).startAndWait();\n}\n\n/**\n * Only install several resolved libraries\n * @param libraries The resolved libraries\n * @param minecraft The minecraft location\n * @param option The install option\n */\nexport async function installResolvedLibraries(libraries: ResolvedLibrary[], minecraft: MinecraftLocation, option?: LibraryOptions): Promise<void> {\n    await installLibrariesTask({ libraries, minecraftDirectory: typeof minecraft === \"string\" ? minecraft : minecraft.root }, option).startAndWait();\n}\n\n/**\n * Install the Minecraft game to a location by version metadata.\n *\n * This will install version json, version jar, and all dependencies (assets, libraries)\n *\n * @param type The type of game, client or server\n * @param versionMeta The version metadata\n * @param minecraft The Minecraft location\n * @param options\n */\nexport function installTask(versionMeta: MinecraftVersionBaseInfo, minecraft: MinecraftLocation, options: Options = {}): Task<ResolvedVersion> {\n    return task(\"install\", async function () {\n        return withAgents(options, async (options) => {\n            const version = await this.yield(installVersionTask(versionMeta, minecraft, options));\n            if (options.side !== \"server\") {\n                await this.yield(installDependenciesTask(version, options));\n            }\n            return version;\n        });\n    });\n}\n/**\n * Only install the json/jar. Do not install dependencies.\n *\n * @param type client or server\n * @param versionMeta the version metadata; get from updateVersionMeta\n * @param minecraft minecraft location\n */\nexport function installVersionTask(versionMeta: MinecraftVersionBaseInfo, minecraft: MinecraftLocation, options: JarOption = {}): Task<ResolvedVersion> {\n    return task(\"version\", async function () {\n        return withAgents(options, async (options) => {\n            await this.yield(new InstallJsonTask(versionMeta, minecraft, options));\n            const version = await VersionJson.parse(minecraft, versionMeta.id);\n            await this.yield(new InstallJarTask(version, minecraft, options));\n            return version;\n        });\n    }, versionMeta);\n}\n\n/**\n * Install the completeness of the Minecraft game assets and libraries on a existed version.\n *\n * @param version The resolved version produced by Version.parse\n * @param minecraft The minecraft location\n */\nexport function installDependenciesTask(version: ResolvedVersion, options: Options = {}): Task<ResolvedVersion> {\n    return task(\"dependencies\", async function () {\n        await withAgents(options, (options) => Promise.all([\n            this.yield(installAssetsTask(version, options)),\n            this.yield(installLibrariesTask(version, options)),\n        ]));\n        return version;\n    });\n}\n\n/**\n * Install or check the assets to resolved version\n *\n * @param version The target version\n * @param options The option to replace assets host url\n */\nexport function installAssetsTask(version: ResolvedVersion, options: AssetsOptions = {}): Task<ResolvedVersion> {\n    return task(\"assets\", async function () {\n        const folder = MinecraftFolder.from(version.minecraftDirectory);\n        const jsonPath = folder.getPath(\"assets\", \"indexes\", version.assets + \".json\");\n\n        await this.yield(new InstallAssetIndexTask(version, options));\n\n        await ensureDir(folder.getPath(\"assets\", \"objects\"));\n        interface AssetIndex {\n            objects: {\n                [key: string]: {\n                    hash: string;\n                    size: number;\n                };\n            };\n        }\n\n        const { objects } = JSON.parse(await readFile(jsonPath).then((b) => b.toString())) as AssetIndex;\n        const objectArray = Object.keys(objects).map((k) => ({ name: k, ...objects[k] }));\n        // let sizes = objectArray.map((a) => a.size).map((a, b) => a + b, 0);\n        await withAgents(options, (options) => this.all(objectArray.map((o) => new InstallAssetTask(o, folder, options)), {\n            throwErrorImmediately: options.throwErrorImmediately ?? false,\n            getErrorMessage: (errs) => `Errors during install Minecraft ${version.id}'s assets at ${version.minecraftDirectory}: ${errs.map(errorToString).join(\"\\n\")}`\n        }));\n\n        return version;\n    });\n}\n\n/**\n * Install all the libraries of providing version\n * @param version The target version\n * @param options The library host swap option\n */\nexport function installLibrariesTask(version: InstallLibraryVersion, options: LibraryOptions = {}): Task<void> {\n    return task(\"libraries\", async function () {\n        const folder = MinecraftFolder.from(version.minecraftDirectory);\n        await withAgents(options, (options) => this.all(version.libraries.map((lib) => new InstallLibraryTask(lib, folder, options)), {\n            throwErrorImmediately: options.throwErrorImmediately ?? false,\n            getErrorMessage: (errs) => `Errors during install libraries at ${version.minecraftDirectory}: ${errs.map(errorToString).join(\"\\n\")}`\n        }));\n    });\n}\n\n/**\n * Only install several resolved libraries\n * @param libraries The resolved libraries\n * @param minecraft The minecraft location\n * @param option The install option\n */\nexport function installResolvedLibrariesTask(libraries: ResolvedLibrary[], minecraft: MinecraftLocation, option?: LibraryOptions) {\n    return installLibrariesTask({ libraries, minecraftDirectory: typeof minecraft === \"string\" ? minecraft : minecraft.root }, option);\n}\n\n/**\n * Only install several resolved assets.\n * @param assets The assets to install\n * @param folder The minecraft folder\n * @param options The asset option\n */\nexport function installResolvedAssetsTask(assets: AssetInfo[], folder: MinecraftFolder, options: AssetsOptions = {}) {\n    return task(\"assets\", async function () {\n        await ensureDir(folder.getPath(\"assets\", \"objects\"));\n\n        // const sizes = assets.map((a) => a.size).map((a, b) => a + b, 0);\n\n        await withAgents(options, (options) => this.all(assets.map((o) => new InstallAssetTask(o, folder, options)), {\n            throwErrorImmediately: false,\n            getErrorMessage: (errs) => `Errors during install assets at ${folder.root}:\\n${errs.map(errorToString).join(\"\\n\")}`,\n        }));\n    });\n}\n\nexport class InstallJsonTask extends DownloadTask {\n    constructor(version: MinecraftVersionBaseInfo, minecraft: MinecraftLocation, options: Options) {\n        const folder = MinecraftFolder.from(minecraft);\n        const destination = folder.getVersionJson(version.id);\n        const expectSha1 = version.url.split(\"/\")[5];\n        const urls = resolveDownloadUrls(version.url, version, options.json);\n\n        super({\n            url: urls,\n            agents: options.agents,\n            segmentPolicy: options.segmentPolicy,\n            retryHandler: options.retryHandler,\n            validator: expectSha1 ? { algorithm: \"sha1\", hash: expectSha1 } : new JsonValidator(),\n            destination,\n        });\n\n        this.name = \"json\";\n        this.param = version;\n    }\n}\n\nexport class InstallJarTask extends DownloadTask {\n    constructor(version: ResolvedVersion, minecraft: MinecraftLocation, options: Options) {\n        const folder = MinecraftFolder.from(minecraft);\n        const type = options.side ?? \"client\";\n        const destination = join(folder.getVersionRoot(version.id),\n            type === \"client\" ? version.id + \".jar\" : version.id + \"-\" + type + \".jar\");\n        const urls = resolveDownloadUrls(version.downloads[type].url, version, options[type]);\n        const expectSha1 = version.downloads[type].sha1;\n\n        super({\n            url: urls,\n            validator: { algorithm: \"sha1\", hash: expectSha1 },\n            destination,\n            agents: options.agents,\n            segmentPolicy: options.segmentPolicy,\n            retryHandler: options.retryHandler,\n        });\n\n        this.name = \"jar\";\n        this.param = version;\n    }\n}\n\nexport class InstallAssetIndexTask extends DownloadTask {\n    constructor(version: ResolvedVersion, options: AssetsOptions = {}) {\n        const folder = MinecraftFolder.from(version.minecraftDirectory);\n        const jsonPath = folder.getPath(\"assets\", \"indexes\", version.assets + \".json\");\n\n        super({\n            url: resolveDownloadUrls(version.assetIndex.url, version, options.assetsIndexUrl),\n            destination: jsonPath,\n            validator: {\n                algorithm: \"sha1\",\n                hash: version.assetIndex.sha1,\n            },\n            agents: options.agents,\n            segmentPolicy: options.segmentPolicy,\n            retryHandler: options.retryHandler,\n        });\n\n        this.name = \"assetIndex\";\n        this.param = version;\n    }\n}\n\nexport class InstallLibraryTask extends DownloadTask {\n    constructor(lib: ResolvedLibrary, folder: MinecraftFolder, options: LibraryOptions) {\n        const libraryPath = lib.download.path;\n        const destination = join(folder.libraries, libraryPath);\n        const urls: string[] = resolveLibraryDownloadUrls(lib, options);\n\n        super({\n            url: urls,\n            validator: lib.download.sha1 === \"\" ? new ZipValidator() : {\n                algorithm: \"sha1\",\n                hash: lib.download.sha1,\n            },\n            destination,\n            agents: options.agents,\n            segmentPolicy: options.segmentPolicy,\n            retryHandler: options.retryHandler,\n        });\n\n        this.name = \"library\";\n        this.param = lib;\n    }\n}\n\nexport class InstallAssetTask extends DownloadTask {\n    constructor(asset: AssetInfo, folder: MinecraftFolder, options: AssetsOptions) {\n        const assetsHosts = [\n            ...normalizeArray(options.assetsHost),\n            DEFAULT_RESOURCE_ROOT_URL,\n        ];\n\n        const { hash, size, name } = asset;\n\n        const head = hash.substring(0, 2);\n        const dir = folder.getPath(\"assets\", \"objects\", head);\n        const file = join(dir, hash);\n        const urls = assetsHosts.map((h) => `${h}/${head}/${hash}`);\n\n        super({\n            url: urls,\n            destination: file,\n            validator: { hash, algorithm: \"sha1\", },\n            agents: options.agents,\n            segmentPolicy: options.segmentPolicy,\n            retryHandler: options.retryHandler,\n        })\n\n        this._total = size;\n        this.name = \"asset\";\n        this.param = asset;\n    }\n}\n\nconst DEFAULT_MAVENS = [\"https://repo1.maven.org/maven2/\"];\n\n/**\n * Resolve a library download urls with fallback.\n *\n * @param library The resolved library\n * @param libraryOptions The library install options\n */\nexport function resolveLibraryDownloadUrls(library: ResolvedLibrary, libraryOptions: LibraryOptions): string[] {\n    const libraryHosts = libraryOptions.libraryHost?.(library) ?? [];\n\n    return [\n        // user defined alternative host to download\n        ...normalizeArray(libraryHosts),\n        ...normalizeArray(libraryOptions.mavenHost).map((m) => joinUrl(m, library.download.path)),\n        library.download.url,\n        ...DEFAULT_MAVENS.map((m) => joinUrl(m, library.download.path)),\n    ];\n}\n","import { LibraryInfo, MinecraftFolder, MinecraftLocation, Version as VersionJson } from \"@xmcl/core\";\nimport { CancelledError, task, AbortableTask } from \"@xmcl/task\";\nimport { open, readEntry, walkEntriesGenerator } from \"@xmcl/unzip\";\nimport { ChildProcess, spawn } from \"child_process\";\nimport { delimiter, dirname } from \"path\";\nimport { ZipFile } from \"yauzl\";\nimport { installResolvedLibrariesTask, InstallSideOption, LibraryOptions } from \"./minecraft\";\nimport { checksum, readFile, spawnProcess, waitProcess } from \"./utils\";\n\nexport interface PostProcessor {\n    /**\n     * The executable jar path\n     */\n    jar: string;\n    /**\n     * The classpath to run\n     */\n    classpath: string[];\n    args: string[];\n    outputs?: { [key: string]: string; };\n}\n\nexport interface InstallProfile {\n    spec?: number;\n    /**\n     * The type of this installation, like \"forge\"\n     */\n    profile: string;\n    /**\n     * The version of this installation\n     */\n    version: string;\n    /**\n     * The version json path\n     */\n    json: string;\n    /**\n     * The maven artifact name: <org>:<artifact-id>:<version>\n     */\n    path: string;\n    /**\n     * The minecraft version\n     */\n    minecraft: string;\n    /**\n     * The processor shared variables. The key is the name of variable to replace.\n     *\n     * The value of client/server is the value of the variable.\n     */\n    data?: { [key: string]: { client: string; server: string; }; };\n    /**\n     * The post processor. Which require java to run.\n     */\n    processors?: Array<PostProcessor>;\n    /**\n     * The required install profile libraries\n     */\n    libraries: VersionJson.NormalLibrary[];\n    /**\n     * Legacy format\n     */\n    versionInfo?: VersionJson;\n}\n\nexport interface InstallProfileOption extends LibraryOptions, InstallSideOption {\n    /**\n     * New forge (>=1.13) require java to install. Can be a executor or java executable path.\n     */\n    java?: string;\n}\n\n/**\n * Resolve processors in install profile\n */\nexport function resolveProcessors(side: \"client\" | \"server\", installProfile: InstallProfile, minecraft: MinecraftFolder) {\n    function normalizePath(val: string) {\n        if (val && val.match(/^\\[.+\\]$/g)) { // match sth like [net.minecraft:client:1.15.2:slim]\n            const name = val.substring(1, val.length - 1);\n            return minecraft.getLibraryByPath(LibraryInfo.resolve(name).path);\n        }\n        return val;\n    }\n    function normalizeVariable(val: string) {\n        if (val && val.match(/^{.+}$/g)) { // match sth like {MAPPINGS}\n            const key = val.substring(1, val.length - 1);\n            return variables[key][side];\n        }\n        return val;\n    }\n    // store the mapping of {VARIABLE_NAME} -> real path in disk\n    const variables: Record<string, { client: string; server: string }> = {\n        SIDE: {\n            client: \"client\",\n            server: \"server\",\n        },\n        MINECRAFT_JAR: {\n            client: minecraft.getVersionJar(installProfile.minecraft),\n            server: minecraft.getVersionJar(installProfile.minecraft, \"server\"),\n        },\n    };\n    if (installProfile.data) {\n        for (const key in installProfile.data) {\n            const { client, server } = installProfile.data[key];\n            variables[key] = {\n                client: normalizePath(client),\n                server: normalizePath(server),\n            };\n        }\n    }\n    if (variables.INSTALLER) {\n        variables.ROOT = {\n            client: dirname(variables.INSTALLER.client),\n            server: dirname(variables.INSTALLER.server),\n        }\n    }\n    let processors = (installProfile.processors || []).map((proc) => ({\n        ...proc,\n        args: proc.args.map(normalizePath).map(normalizeVariable),\n        outputs: proc.outputs\n            ? Object.entries(proc.outputs).map(([k, v]) => ({ [normalizeVariable(k)]: normalizeVariable(v) })).reduce((a, b) => Object.assign(a, b), {})\n            : undefined,\n    }));\n    processors = processors.filter((processor) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        if (processor.sides && Array.isArray(processor.sides)) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            if (processor.sides.includes(side)) {\n                return true\n            } else {\n                return false\n            }\n        }\n        return true\n    });\n    return processors;\n}\n\n/**\n * Post process the post processors from `InstallProfile`.\n *\n * @param processors The processor info\n * @param minecraft The minecraft location\n * @param java The java executable path\n * @throws {@link PostProcessError}\n */\nexport function postProcess(processors: PostProcessor[], minecraft: MinecraftFolder, java: string) {\n    return new PostProcessingTask(processors, minecraft, java).startAndWait();\n}\n\n\n/**\n * Install by install profile. The install profile usually contains some preprocess should run before installing dependencies.\n *\n * @param installProfile The install profile\n * @param minecraft The minecraft location\n * @param options The options to install\n * @throws {@link PostProcessError}\n */\nexport function installByProfile(installProfile: InstallProfile, minecraft: MinecraftLocation, options: InstallProfileOption = {}) {\n    return installByProfileTask(installProfile, minecraft, options).startAndWait();\n}\n\n/**\n * Install by install profile. The install profile usually contains some preprocess should run before installing dependencies.\n *\n * @param installProfile The install profile\n * @param minecraft The minecraft location\n * @param options The options to install\n */\nexport function installByProfileTask(installProfile: InstallProfile, minecraft: MinecraftLocation, options: InstallProfileOption = {}) {\n    return task(\"installByProfile\", async function () {\n        const minecraftFolder = MinecraftFolder.from(minecraft);\n        const java = options.java || \"java\";\n\n        const processor = resolveProcessors(options.side || \"client\", installProfile, minecraftFolder);\n\n        const versionJson: VersionJson = await readFile(minecraftFolder.getVersionJson(installProfile.version)).then((b) => b.toString()).then(JSON.parse);\n        const libraries = VersionJson.resolveLibraries([...installProfile.libraries, ...versionJson.libraries]);\n\n        await this.yield(installResolvedLibrariesTask(libraries, minecraft, options));\n        await this.yield(new PostProcessingTask(processor, minecraftFolder, java));\n    });\n}\n\nexport class PostProcessBadJarError extends Error {\n    constructor(public jarPath: string, public causeBy: Error) {\n        super(`Fail to post process bad jar: ${jarPath}`)\n    }\n\n    error = \"PostProcessBadJar\"\n}\n\nexport class PostProcessNoMainClassError extends Error {\n    constructor(public jarPath: string) {\n        super(`Fail to post process bad jar without main class: ${jarPath}`)\n    }\n\n    error = \"PostProcessNoMainClass\"\n}\n\nexport class PostProcessFailedError extends Error {\n    constructor(public jarPath: string, public commands: string[], message: string) {\n        super(message)\n    }\n\n    error = \"PostProcessFailed\"\n}\n/**\n * Post process the post processors from `InstallProfile`.\n *\n * @param processors The processor info\n * @param minecraft The minecraft location\n * @param java The java executable path\n * @throws {@link PostProcessError}\n */\nexport class PostProcessingTask extends AbortableTask<void> {\n    readonly name: string = \"postProcessing\";\n\n    private pointer: number = 0;\n\n    private activeProcess: ChildProcess | undefined\n\n    constructor(private processors: PostProcessor[], private minecraft: MinecraftFolder, private java: string) {\n        super();\n        this.param = processors\n        this._total = processors.length;\n    }\n\n    protected async findMainClass(lib: string) {\n        let zip: ZipFile | undefined;\n        let mainClass: string | undefined;\n        try {\n            zip = await open(lib, { lazyEntries: true });\n            for await (const entry of walkEntriesGenerator(zip)) {\n                if (entry.fileName === \"META-INF/MANIFEST.MF\") {\n                    const content = await readEntry(zip, entry).then((b) => b.toString());\n                    mainClass = content.split(\"\\n\")\n                        .map((l) => l.split(\": \"))\n                        .find((arr) => arr[0] === \"Main-Class\")?.[1].trim();\n                    break;\n                }\n            }\n        } catch (e) {\n            throw new PostProcessBadJarError(lib, e as any);\n        } finally {\n            zip?.close();\n        }\n        if (!mainClass) {\n            throw new PostProcessNoMainClassError(lib);\n        }\n        return mainClass;\n    }\n\n    protected async isInvalid(outputs: Required<PostProcessor>[\"outputs\"]) {\n        for (const [file, expect] of Object.entries(outputs)) {\n            let sha1 = await checksum(file, \"sha1\").catch((e) => \"\");\n            let expected = expect.replace(/'/g, \"\");\n            if (expected !== sha1) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    protected async postProcess(mc: MinecraftFolder, proc: PostProcessor, java: string) {\n        let jarRealPath = mc.getLibraryByPath(LibraryInfo.resolve(proc.jar).path);\n        let mainClass = await this.findMainClass(jarRealPath);\n        let cp = [...proc.classpath, proc.jar].map(LibraryInfo.resolve).map((p) => mc.getLibraryByPath(p.path)).join(delimiter);\n        let cmd = [\"-cp\", cp, mainClass, ...proc.args];\n        try {\n            const process = spawn(java, cmd);\n            await waitProcess(process);\n        } catch (e) {\n            if (typeof e === \"string\") {\n                throw new PostProcessFailedError(proc.jar, [java, ...cmd], e);\n            }\n            throw e;\n        }\n        if (proc.outputs && await this.isInvalid(proc.outputs)) {\n            throw new PostProcessFailedError(proc.jar, [java, ...cmd], \"Validate the output of process failed!\");\n        }\n    }\n\n    protected async process(): Promise<void> {\n        for (; this.pointer < this.processors.length; this.pointer++) {\n            const proc = this.processors[this.pointer];\n            if (this.isCancelled) {\n                throw new CancelledError();\n            }\n            if (this.isPaused) {\n                throw \"PAUSED\";\n            }\n            if (!proc.outputs || await this.isInvalid(proc.outputs)) {\n                await this.postProcess(this.minecraft, proc, this.java);\n            }\n            if (this.isCancelled) {\n                throw new CancelledError();\n            }\n            if (this.isPaused) {\n                throw \"PAUSED\";\n            }\n            this._progress = this.pointer;\n            this.update(1);\n        }\n    }\n\n    protected async abort(isCancelled: boolean): Promise<void> {\n        // this.activeProcess?.kill()\n    }\n\n    protected isAbortedError(e: any): boolean {\n        return e === \"PAUSED\"\n    }\n}\n","import { LibraryInfo, MinecraftFolder, MinecraftLocation, Version as VersionJson } from \"@xmcl/core\";\nimport { parse as parseForge } from \"@xmcl/forge-site-parser\";\nimport { Task, task } from \"@xmcl/task\";\nimport { filterEntries, open, openEntryReadStream, readEntry } from \"@xmcl/unzip\";\nimport { createWriteStream } from \"fs\";\nimport { dirname, join, posix, sep } from \"path\";\nimport { Entry, ZipFile } from \"yauzl\";\nimport { DownloadTask } from \"./downloadTask\";\nimport { withAgents } from \"./http/agents\";\nimport { getAndParseIfUpdate, Timestamped } from \"./http/fetch\";\nimport { joinUrl } from \"./http/utils\";\nimport { ZipValidator } from \"./http/validator\";\nimport { LibraryOptions, resolveLibraryDownloadUrls } from \"./minecraft\";\nimport { installByProfileTask, InstallProfile, InstallProfileOption } from \"./profile\";\nimport { ensureFile, InstallOptions as InstallOptionsBase, normalizeArray, pipeline, writeFile } from \"./utils\";\n\nexport interface ForgeVersionList extends Timestamped {\n    mcversion: string;\n    versions: ForgeVersion[];\n}\n/**\n * The forge version metadata to download a forge\n */\nexport interface ForgeVersion {\n    /**\n     * The installer info\n     */\n    installer: {\n        md5: string;\n        sha1: string;\n        /**\n         * The url path to concat with forge maven\n         */\n        path: string;\n    };\n    universal: {\n        md5: string;\n        sha1: string;\n        /**\n         * The url path to concat with forge maven\n         */\n        path: string;\n    };\n    /**\n     * The minecraft version\n     */\n    mcversion: string;\n    /**\n     * The forge version (without minecraft version)\n     */\n    version: string;\n\n    type: \"buggy\" | \"recommended\" | \"common\" | \"latest\";\n}\n\n\n/**\n * All the useful entries in forge installer jar\n */\nexport interface ForgeInstallerEntries {\n    /**\n     *  maven/net/minecraftforge/forge/${forgeVersion}/forge-${forgeVersion}.jar\n     */\n    forgeJar?: Entry\n    /**\n     *  maven/net/minecraftforge/forge/${forgeVersion}/forge-${forgeVersion}-universal.jar\n     */\n    forgeUniversalJar?: Entry\n    /**\n     * data/client.lzma\n     */\n    clientLzma?: Entry\n    /**\n     * data/server.lzma\n     */\n    serverLzma?: Entry\n    /**\n     * install_profile.json\n     */\n    installProfileJson?: Entry\n    /**\n     * version.json\n     */\n    versionJson?: Entry\n    /**\n     * forge-${forgeVersion}-universal.jar\n     */\n    legacyUniversalJar?: Entry\n    /**\n     * data/run.sh\n     */\n    runSh?: Entry\n    /**\n     * data/run.bat\n     */\n    runBat?: Entry\n    /**\n     * data/unix_args.txt\n     */\n    unixArgs?: Entry\n    /**\n     * data/user_jvm_args.txt\n     */\n    userJvmArgs?: Entry\n    /**\n     * data/win_args.txt\n     */\n    winArgs?: Entry\n}\n\nexport type ForgeInstallerEntriesPattern = ForgeInstallerEntries & Required<Pick<ForgeInstallerEntries, \"versionJson\" | \"installProfileJson\">>;\nexport type ForgeLegacyInstallerEntriesPattern = Required<Pick<ForgeInstallerEntries, \"installProfileJson\" | \"legacyUniversalJar\">>;\n\n\ntype RequiredVersion = {\n    /**\n     * The installer info.\n     *\n     * If this is not presented, it will genreate from mcversion and forge version.\n     */\n    installer?: {\n        sha1?: string;\n        /**\n         * The url path to concat with forge maven\n         */\n        path: string;\n    };\n    /**\n     * The minecraft version\n     */\n    mcversion: string;\n    /**\n     * The forge version (without minecraft version)\n     */\n    version: string;\n}\n\nexport const DEFAULT_FORGE_MAVEN = \"http://files.minecraftforge.net/maven\";\n\n/**\n * The options to install forge.\n */\nexport interface InstallForgeOptions extends LibraryOptions, InstallOptionsBase, InstallProfileOption {\n}\n\nexport class DownloadForgeInstallerTask extends DownloadTask {\n    readonly installJarPath: string\n\n    constructor(forgeVersion: string, installer: RequiredVersion[\"installer\"], minecraft: MinecraftFolder, options: InstallForgeOptions) {\n        const path = installer ? installer.path : `net/minecraftforge/forge/${forgeVersion}/forge-${forgeVersion}-installer.jar`;\n\n        const forgeMavenPath = path.replace(\"/maven\", \"\").replace(\"maven\", \"\");\n        const library = VersionJson.resolveLibrary({\n            name: `net.minecraftforge:forge:${forgeVersion}:installer`,\n            downloads: {\n                artifact: {\n                    url: joinUrl(DEFAULT_FORGE_MAVEN, forgeMavenPath),\n                    path: `net/minecraftforge/forge/${forgeVersion}/forge-${forgeVersion}-installer.jar`,\n                    size: -1,\n                    sha1: installer?.sha1 || \"\",\n                }\n            }\n        })!;\n        const mavenHost = options.mavenHost ? [...normalizeArray(options.mavenHost), DEFAULT_FORGE_MAVEN] : [DEFAULT_FORGE_MAVEN];\n        const urls = resolveLibraryDownloadUrls(library, { ...options, mavenHost });\n\n        const installJarPath = minecraft.getLibraryByPath(library.path);\n\n        super({\n            url: urls,\n            destination: installJarPath,\n            validator: installer?.sha1 ? {\n                hash: installer.sha1,\n                algorithm: \"sha1\",\n            } : new ZipValidator(),\n            agents: options.agents,\n            segmentPolicy: options.segmentPolicy,\n            retryHandler: options.retryHandler,\n        });\n\n        this.installJarPath = installJarPath;\n        this.name = \"downloadInstaller\";\n        this.param = { version: forgeVersion };\n    }\n}\n\n\nfunction getLibraryPathWithoutMaven(mc: MinecraftFolder, name: string) {\n    // remove the maven/ prefix\n    return mc.getLibraryByPath(name.substring(name.indexOf(\"/\") + 1));\n}\nfunction extractEntryTo(zip: ZipFile, e: Entry, dest: string) {\n    return openEntryReadStream(zip, e).then((stream) => pipeline(stream, createWriteStream(dest)));\n}\n\nasync function installLegacyForgeFromZip(zip: ZipFile, entries: ForgeLegacyInstallerEntriesPattern, profile: InstallProfile, mc: MinecraftFolder, options: InstallForgeOptions) {\n    const versionJson = profile.versionInfo!;\n\n    // apply override for inheritsFrom\n    versionJson.id = options.versionId || versionJson.id;\n    versionJson.inheritsFrom = options.inheritsFrom || versionJson.inheritsFrom;\n\n    const rootPath = mc.getVersionRoot(versionJson.id);\n    const versionJsonPath = join(rootPath, `${versionJson.id}.json`);\n    await ensureFile(versionJsonPath);\n\n    const library = LibraryInfo.resolve(versionJson.libraries.find((l) => l.name.startsWith(\"net.minecraftforge:forge\"))!);\n\n    await Promise.all([\n        writeFile(versionJsonPath, JSON.stringify(versionJson, undefined, 4)),\n        extractEntryTo(zip, entries.legacyUniversalJar, mc.getLibraryByPath(library.path)),\n    ]);\n\n    return versionJson.id;\n}\n\n/**\n * Unpack forge installer jar file content to the version library artifact directory.\n * @param zip The forge jar file\n * @param entries The entries\n * @param forgeVersion The expected version of forge\n * @param profile The forge install profile\n * @param mc The minecraft location\n * @returns The installed version id\n */\nasync function unpackForgeInstaller(zip: ZipFile, entries: ForgeInstallerEntriesPattern, forgeVersion: string, profile: InstallProfile, mc: MinecraftFolder, jarPath: string, options: InstallForgeOptions) {\n    const versionJson: VersionJson = await readEntry(zip, entries.versionJson).then((b) => b.toString()).then(JSON.parse);\n\n    // apply override for inheritsFrom\n    versionJson.id = options.versionId || versionJson.id;\n    versionJson.inheritsFrom = options.inheritsFrom || versionJson.inheritsFrom;\n\n    // resolve all the required paths\n    const rootPath = mc.getVersionRoot(versionJson.id);\n\n    const versionJsonPath = join(rootPath, `${versionJson.id}.json`);\n    const installJsonPath = join(rootPath, \"install_profile.json\");\n\n    const dataRoot = dirname(jarPath);\n\n    const unpackData = (entry: Entry) => {\n        promises.push(extractEntryTo(zip, entry, join(dataRoot, entry.fileName.substring(\"data/\".length))));\n    }\n\n    await ensureFile(versionJsonPath);\n\n    const promises: Promise<void>[] = [];\n    if (entries.forgeUniversalJar) {\n        promises.push(extractEntryTo(zip, entries.forgeUniversalJar, getLibraryPathWithoutMaven(mc, entries.forgeUniversalJar.fileName)));\n    }\n\n    if (!profile.data) {\n        profile.data = {};\n    }\n\n    const installerMaven = `net.minecraftforge:forge:${forgeVersion}:installer`\n    profile.data.INSTALLER = {\n        client: `[${installerMaven}]`,\n        server: `[${installerMaven}]`,\n    }\n\n    if (entries.serverLzma) {\n        // forge version and mavens, compatible with twitch api\n        const serverMaven = `net.minecraftforge:forge:${forgeVersion}:serverdata@lzma`;\n        // override forge bin patch location\n        profile.data.BINPATCH.server = `[${serverMaven}]`;\n\n        const serverBinPath = mc.getLibraryByPath(LibraryInfo.resolve(serverMaven).path);\n        await ensureFile(serverBinPath);\n        promises.push(extractEntryTo(zip, entries.serverLzma, serverBinPath));\n    }\n\n    if (entries.clientLzma) {\n        // forge version and mavens, compatible with twitch api\n        const clientMaven = `net.minecraftforge:forge:${forgeVersion}:clientdata@lzma`;\n        // override forge bin patch location\n        profile.data.BINPATCH.client = `[${clientMaven}]`;\n\n        const clientBinPath = mc.getLibraryByPath(LibraryInfo.resolve(clientMaven).path);\n        await ensureFile(clientBinPath);\n        promises.push(extractEntryTo(zip, entries.clientLzma, clientBinPath));\n    }\n\n    if (entries.forgeJar) {\n        promises.push(extractEntryTo(zip, entries.forgeJar, getLibraryPathWithoutMaven(mc, entries.forgeJar.fileName)));\n    }\n    if (entries.runBat) { unpackData(entries.runBat) }\n    if (entries.runSh) { unpackData(entries.runSh) }\n    if (entries.winArgs) { unpackData(entries.winArgs) }\n    if (entries.unixArgs) { unpackData(entries.unixArgs) }\n    if (entries.userJvmArgs) { unpackData(entries.userJvmArgs) }\n\n    promises.push(\n        writeFile(installJsonPath, JSON.stringify(profile)),\n        writeFile(versionJsonPath, JSON.stringify(versionJson)),\n    );\n\n    await Promise.all(promises);\n\n    return versionJson.id;\n}\n\nexport function isLegacyForgeInstallerEntries(entries: ForgeInstallerEntries): entries is ForgeLegacyInstallerEntriesPattern {\n    return !!entries.legacyUniversalJar && !!entries.installProfileJson;\n}\n\nexport function isForgeInstallerEntries(entries: ForgeInstallerEntries): entries is ForgeInstallerEntriesPattern {\n    return !!entries.installProfileJson && !!entries.versionJson;\n}\n\n/**\n * Walk the forge installer file to find key entries\n * @param zip THe forge instal\n * @param forgeVersion Forge version to install\n */\nexport async function walkForgeInstallerEntries(zip: ZipFile, forgeVersion: string): Promise<ForgeInstallerEntries> {\n    const [forgeJar, forgeUniversalJar, clientLzma, serverLzma, installProfileJson, versionJson, legacyUniversalJar, runSh, runBat, unixArgs, userJvmArgs, winArgs] = await filterEntries(zip, [\n        `maven/net/minecraftforge/forge/${forgeVersion}/forge-${forgeVersion}.jar`,\n        `maven/net/minecraftforge/forge/${forgeVersion}/forge-${forgeVersion}-universal.jar`,\n        \"data/client.lzma\",\n        \"data/server.lzma\",\n        \"install_profile.json\",\n        \"version.json\",\n        `forge-${forgeVersion}-universal.jar`, // legacy installer format\n        \"data/run.sh\",\n        \"data/run.bat\",\n        \"data/unix_args.txt\",\n        \"data/user_jvm_args.txt\",\n        \"data/win_args.txt\",\n    ]);\n    return {\n        forgeJar,\n        forgeUniversalJar,\n        clientLzma,\n        serverLzma,\n        installProfileJson,\n        versionJson,\n        legacyUniversalJar,\n        runSh, runBat, unixArgs, userJvmArgs, winArgs,\n    };\n}\n\nexport class BadForgeInstallerJarError extends Error {\n    error = \"BadForgeInstallerJar\"\n\n    constructor(\n        public jarPath: string,\n        /**\n         * What entry in jar is missing\n         */\n        public entry?: string) {\n        super(entry ? `Missing entry ${entry} in forge installer jar: ${jarPath}` : `Bad forge installer: ${jarPath}`);\n    }\n}\n\nfunction installByInstallerTask(version: RequiredVersion, minecraft: MinecraftLocation, options: InstallForgeOptions) {\n    return task(\"installForge\", async function () {\n        function getForgeArtifactVersion() {\n            let [_, minor] = version.mcversion.split(\".\");\n            let minorVersion = Number.parseInt(minor);\n            if (minorVersion >= 7 && minorVersion <= 8) {\n                return `${version.mcversion}-${version.version}-${version.mcversion}`;\n            }\n            return `${version.mcversion}-${version.version}`;\n        }\n        const forgeVersion = getForgeArtifactVersion();\n        const mc = MinecraftFolder.from(minecraft);\n\n        return withAgents(options, async (options) => {\n            const jarPath = await this.yield(new DownloadForgeInstallerTask(forgeVersion, version.installer, mc, options)\n                .map(function () { return this.installJarPath }));\n\n            const zip = await open(jarPath, { lazyEntries: true, autoClose: false });\n            const entries = await walkForgeInstallerEntries(zip, forgeVersion);\n\n            if (!entries.installProfileJson) {\n                throw new BadForgeInstallerJarError(jarPath, \"install_profile.json\");\n            }\n            const profile: InstallProfile = await readEntry(zip, entries.installProfileJson).then((b) => b.toString()).then(JSON.parse);\n            if (isForgeInstallerEntries(entries)) {\n                // new forge\n                const versionId = await unpackForgeInstaller(zip, entries, forgeVersion, profile, mc, jarPath, options);\n                await this.concat(installByProfileTask(profile, minecraft, options));\n                return versionId;\n            } else if (isLegacyForgeInstallerEntries(entries)) {\n                // legacy forge\n                return installLegacyForgeFromZip(zip, entries, profile, mc, options);\n            } else {\n                // bad forge\n                throw new BadForgeInstallerJarError(jarPath);\n            }\n        });\n    });\n}\n\n/**\n * Install forge to target location.\n * Installation task for forge with mcversion >= 1.13 requires java installed on your pc.\n * @param version The forge version meta\n * @returns The installed version name.\n * @throws {@link BadForgeInstallerJarError}\n */\nexport function installForge(version: RequiredVersion, minecraft: MinecraftLocation, options?: InstallForgeOptions) {\n    return installForgeTask(version, minecraft, options).startAndWait();\n}\n\n/**\n * Install forge to target location.\n * Installation task for forge with mcversion >= 1.13 requires java installed on your pc.\n * @param version The forge version meta\n * @returns The task to install the forge\n * @throws {@link BadForgeInstallerJarError}\n */\nexport function installForgeTask(version: RequiredVersion, minecraft: MinecraftLocation, options: InstallForgeOptions = {}): Task<string> {\n    return installByInstallerTask(version, minecraft, options);\n}\n\n/**\n * Query the webpage content from files.minecraftforge.net.\n *\n * You can put the last query result to the fallback option. It will check if your old result is up-to-date.\n * It will request a new page only when the fallback option is outdated.\n *\n * @param option The option can control querying minecraft version, and page caching.\n */\nexport async function getForgeVersionList(option: {\n    /**\n     * The minecraft version you are requesting\n     */\n    mcversion?: string;\n    /**\n     * If this presents, it will send request with the original list timestamp.\n     *\n     * If the server believes there is no modification after the original one,\n     * it will directly return the orignal one.\n     */\n    original?: ForgeVersionList;\n} = {}): Promise<ForgeVersionList> {\n    const mcversion = option.mcversion || \"\";\n    const url = mcversion === \"\" ? \"http://files.minecraftforge.net/maven/net/minecraftforge/forge/index.html\" : `http://files.minecraftforge.net/maven/net/minecraftforge/forge/index_${mcversion}.html`;\n    return getAndParseIfUpdate(url, parseForge, option.original);\n}\n","import { BaseTask, CancelledError, TaskState } from \"@xmcl/task\";\nimport { openEntryReadStream } from \"@xmcl/unzip\";\nimport { createWriteStream } from \"fs\";\nimport { join } from \"path\";\nimport { Readable, Writable } from \"stream\";\nimport { Entry, ZipFile } from \"yauzl\";\nimport { ensureFile, pipeline } from \"./utils\";\n\nexport interface EntryResolver {\n    (entry: Entry): Promise<string> | string\n}\n\nexport function getDefaultEntryResolver(): EntryResolver {\n    return (e) => e.fileName;\n}\n\nexport class UnzipTask extends BaseTask<void> {\n    private streams: [Readable, Writable][] = [];\n    private _onCancelled = () => { };\n\n    constructor(readonly zipFile: ZipFile, readonly entries: Entry[], destination: string, readonly resolver: EntryResolver = getDefaultEntryResolver()) {\n        super();\n        this._to = destination;\n    }\n\n    protected async handleEntry(entry: Entry, relativePath: string) {\n        const file = join(this.to!, relativePath);\n        if (this._state === TaskState.Cancelled) {\n            throw new CancelledError();\n        }\n\n        const readStream = await openEntryReadStream(this.zipFile, entry);\n        if (this.isCancelled) {\n            throw new CancelledError();\n        }\n        if (this._state === TaskState.Paused) {\n            readStream.pause();\n        }\n\n        await ensureFile(file);\n        const writeStream = createWriteStream(file);\n        readStream.on(\"data\", (buf: Buffer) => {\n            this._progress += buf.length;\n            this.update(buf.length);\n        });\n        await pipeline(readStream, writeStream);\n    }\n\n    protected async runTask(): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        for (const e of this.entries) {\n            const path = await this.resolver(e);\n            if (this.isCancelled) {\n                throw new CancelledError();\n            }\n            this._total += e.uncompressedSize;\n            promises.push(this.handleEntry(e, path));\n        }\n\n        this.update(0);\n\n        try {\n            await Promise.all(promises);\n        } catch (e) {\n            if (e instanceof CancelledError) {\n                this._onCancelled();\n            }\n            throw e;\n        }\n    }\n\n    protected cancelTask(): Promise<void> {\n        for (const [read, write] of this.streams) {\n            read.unpipe();\n            read.destroy(new CancelledError());\n            this.zipFile.close();\n            write.destroy(new CancelledError());\n        }\n        return new Promise((resolve) => {\n            this._onCancelled = resolve;\n        })\n    }\n    protected async pauseTask(): Promise<void> {\n        const promise = Promise.all(this.streams.map(([read]) => new Promise((resolve) =>\n            read.once(\"pause\", resolve))))\n        for (const [read] of this.streams) {\n            read.pause();\n        }\n        await promise;\n    }\n\n    protected async resumeTask(): Promise<void> {\n        const promise = Promise.all(this.streams.map(([read]) => new Promise((resolve) =>\n            read.once(\"readable\", resolve))));\n        for (const [read] of this.streams) {\n            read.resume();\n        }\n        await promise;\n    }\n}\n","import { MinecraftFolder, MinecraftLocation } from \"@xmcl/core\";\nimport { task, Task, TaskGroup } from \"@xmcl/task\";\nimport { open, readAllEntries, readEntry } from \"@xmcl/unzip\";\nimport { Agent as HttpsAgent } from \"https\";\nimport { basename, join } from \"path\";\nimport { Entry, ZipFile } from \"yauzl\";\nimport { DownloadTask } from \"./downloadTask\";\nimport { withAgents } from \"./http/agents\";\nimport { DownloadBaseOptions } from \"./http/download\";\nimport { fetchText } from \"./http/fetch\";\nimport { UnzipTask } from \"./unzip\";\nimport { errorToString, ParallelTaskOptions } from \"./utils\";\n\nexport interface CurseforgeOptions extends DownloadBaseOptions, ParallelTaskOptions {\n    /**\n     * The function to query a curseforge project downloadable url.\n     */\n    queryFileUrl?: CurseforgeURLQuery;\n    /**\n     * Should it replace the override files if the file is existed.\n     */\n    replaceExisted?: boolean;\n    /**\n     * Overload the manifest for this installation.\n     * It will use this manifest instead of the read manifest from modpack zip to install.\n     */\n    manifest?: Manifest;\n    /**\n     * The function to resolve the file path from url and other.\n     *\n     * By default this will install all the file\n     */\n    filePathResolver?: FilePathResolver;\n}\n\nexport interface InstallFileOptions extends DownloadBaseOptions {\n    /**\n     * The function to query a curseforge project downloadable url.\n     */\n    queryFileUrl?: CurseforgeURLQuery;\n}\n\ntype InputType = string | Buffer | { zip: ZipFile; entries: Entry[] };\n\nexport interface Manifest {\n    manifestType: string;\n    manifestVersion: number;\n    minecraft: {\n        /**\n         * Minecraft version\n         */\n        version: string;\n        libraries?: string;\n        /**\n         * Can be forge\n         */\n        modLoaders: {\n            id: string;\n            primary: boolean;\n        }[];\n    };\n    name: string;\n    version: string;\n    author: string;\n    files: {\n        projectID: number;\n        fileID: number;\n        required: boolean;\n    }[];\n    overrides: string;\n}\n\nexport interface File {\n    projectID: number;\n    fileID: number;\n}\n\nexport class BadCurseforgeModpackError extends Error {\n    error = \"BadCurseforgeModpack\"\n\n    constructor(public modpack: InputType,\n        /**\n         * What required entry is missing in modpack.\n         */\n        public entry: string) {\n        super(`Missing entry ${entry} in curseforge modpack: ${modpack}`);\n    }\n}\n\n/**\n * Read the mainifest data from modpack\n * @throws {@link BadCurseforgeModpackError}\n */\nexport function readManifestTask(input: InputType): Task<Manifest> {\n    return task(\"unpack\", async () => {\n        const zip = await normalizeInput(input);\n        const mainfiestEntry = zip.entries.find((e) => e.fileName === \"manifest.json\");\n        if (!mainfiestEntry) {\n            throw new BadCurseforgeModpackError(input, \"manifest.json\");\n        }\n        const buffer = await readEntry(zip.zip, mainfiestEntry)\n        const content: Manifest = JSON.parse(buffer.toString());\n        return content;\n    })\n}\n\n/**\n * Read the mainifest data from modpack\n * @throws {@link BadCurseforgeModpackError}\n */\nexport function readManifest(zip: InputType) {\n    return readManifestTask(zip).startAndWait();\n}\n\nexport type FilePathResolver = (projectId: number, fileId: number, minecraft: MinecraftFolder, url: string) => string | Promise<string>;\nexport type CurseforgeURLQuery = (projectId: number, fileId: number) => Promise<string>;\nexport type CurseforgeFileTypeQuery = (projectId: number) => Promise<\"mods\" | \"resourcepacks\">;\n\nexport function createDefaultCurseforgeQuery(): CurseforgeURLQuery {\n    let agent = new HttpsAgent();\n    return (projectId, fileId) => fetchText(`https://addons-ecs.forgesvc.net/api/v2/addon/${projectId}/file/${fileId}/download-url`, { https: agent });\n}\n/**\n * Install curseforge modpack to a specific Minecraft location.\n *\n * @param zip The curseforge modpack zip buffer or file path\n * @param minecraft The minecraft location\n * @param options The options for query curseforge\n */\nexport function installCurseforgeModpack(zip: InputType, minecraft: MinecraftLocation, options?: CurseforgeOptions) {\n    return installCurseforgeModpackTask(zip, minecraft, options).startAndWait();\n}\n\n\nexport class DownloadCurseforgeFilesTask extends TaskGroup<void> {\n    constructor(readonly manifest: Manifest, readonly minecraft: MinecraftFolder, readonly options: CurseforgeOptions) {\n        super();\n        this.name = \"download\";\n        this.param = manifest;\n    }\n\n    protected async runTask(): Promise<void> {\n        const requestor = this.options?.queryFileUrl || createDefaultCurseforgeQuery();\n        const resolver = this.options?.filePathResolver || ((p, f, m, u) => m.getMod(basename(u)));\n        const minecraft = this.minecraft;\n        return withAgents(this.options, async (options) => {\n            const tasks = await Promise.all(this.manifest.files.map(async (f) => {\n                const from = await requestor(f.projectID, f.fileID);\n                const to = await resolver(f.projectID, f.fileID, minecraft, from);\n\n                return new DownloadTask({\n                    url: from,\n                    destination: to,\n                    agents: options.agents,\n                    segmentPolicy: options.segmentPolicy,\n                    retryHandler: options.retryHandler,\n                });\n            }));\n            this.children.push(...tasks);\n            await this.all(tasks, {\n                throwErrorImmediately: this.options.throwErrorImmediately ?? false,\n                getErrorMessage: (errs) => `Fail to install curseforge modpack to ${minecraft.root}: ${errs.map(errorToString).join(\"\\n\")}`\n            });\n        })\n    }\n}\n\nasync function normalizeInput(input: InputType): Promise<{ zip: ZipFile; entries: Entry[] }> {\n    if (typeof input === \"string\" || input instanceof Buffer) {\n        const zip = await open(input, { lazyEntries: true, autoClose: false });\n        return { zip, entries: await readAllEntries(zip) }\n    } else {\n        return input;\n    }\n}\n\n/**\n * Install curseforge modpack to a specific Minecraft location.\n *\n * This will NOT install the Minecraft version in the modpack, and will NOT install the forge or other modload listed in modpack!\n * Please resolve them by yourself.\n *\n * @param input The curseforge modpack zip buffer or file path\n * @param minecraft The minecraft location\n * @param options The options for query curseforge\n * @throws {@link BadCurseforgeModpackError}\n */\nexport function installCurseforgeModpackTask(input: InputType, minecraft: MinecraftLocation, options: CurseforgeOptions = {}) {\n    return task(\"installCurseforgeModpack\", async function () {\n        const folder = MinecraftFolder.from(minecraft);\n        const zip = await normalizeInput(input);\n        const manifest = options?.manifest ?? (await this.yield(readManifestTask(zip)));\n        await this.yield(new DownloadCurseforgeFilesTask(manifest, folder, options));\n        await this.yield(new UnzipTask(\n            zip.zip,\n            zip.entries.filter((e) => !e.fileName.endsWith(\"/\") && e.fileName.startsWith(manifest.overrides)),\n            folder.root,\n            (e) => e.fileName.substring(manifest.overrides.length)\n        ).setName(\"unpack\"));\n        return manifest;\n    });\n}\n\n/**\n * Install a cureseforge xml file to a specific locations\n */\nexport function installCurseforgeFile(file: File, destination: string, options?: InstallFileOptions) {\n    return installCurseforgeFileTask(file, destination, options).startAndWait();\n}\n\n/**\n * Install a cureseforge xml file to a specific locations\n */\nexport function installCurseforgeFileTask(file: File, destination: string, options: InstallFileOptions = {}) {\n    return task(\"installCurseforgeFile\", async function () {\n        const requestor = options.queryFileUrl || createDefaultCurseforgeQuery();\n        const url = await requestor(file.projectID, file.fileID);\n        await new DownloadTask({\n            url,\n            destination: join(destination, basename(url)),\n            agents: options.agents,\n            segmentPolicy: options.segmentPolicy,\n            retryHandler: options.retryHandler,\n        }).startAndWait(this.context, this.parent);\n    });\n}\n","import { ClassReader, ClassVisitor, Opcodes } from \"@xmcl/asm\";\nimport { MinecraftFolder, MinecraftLocation, Version } from \"@xmcl/core\";\nimport { task } from \"@xmcl/task\";\nimport { getEntriesRecord, open, readAllEntries, readEntry } from \"@xmcl/unzip\";\nimport { ensureFile, InstallOptions, spawnProcess, writeFile } from \"./utils\";\n\nexport interface InstallOptifineOptions extends InstallOptions {\n    /**\n     * Use \"optifine.OptiFineForgeTweaker\" instead of \"optifine.OptiFineTweaker\" for tweakClass.\n     *\n     * If you want to install upon forge, you should use this.\n     */\n    useForgeTweaker?: boolean;\n}\n\n/**\n * Generate the optifine version json from provided info.\n * @param editionRelease The edition + release with _\n * @param minecraftVersion The minecraft version\n * @param launchWrapperVersion The launch wrapper version\n * @param options The install options\n * @beta Might be changed and don't break the major version\n */\nexport function generateOptifineVersion(editionRelease: string, minecraftVersion: string, launchWrapperVersion?: string, options: InstallOptifineOptions = {}): Version {\n    let id = options.versionId ?? `${minecraftVersion}-Optifine_${editionRelease}`;\n    let inheritsFrom = options.inheritsFrom ?? minecraftVersion;\n    let mainClass = \"net.minecraft.launchwrapper.Launch\";\n    let libraries = [{ name: `optifine:Optifine:${minecraftVersion}_${editionRelease}` }];\n    if (launchWrapperVersion) {\n        libraries.unshift({ name: `optifine:launchwrapper-of:${launchWrapperVersion}` });\n    } else {\n        libraries.unshift({ name: \"net.minecraft:launchwrapper:1.12\" });\n    }\n    return {\n        id,\n        inheritsFrom,\n        arguments: {\n            game: [\"--tweakClass\", options.useForgeTweaker ? \"optifine.OptiFineForgeTweaker\" : \"optifine.OptiFineTweaker\"],\n            jvm: [],\n        },\n        releaseTime: new Date().toJSON(),\n        time: new Date().toJSON(),\n        type: \"release\",\n        libraries,\n        mainClass,\n        minimumLauncherVersion: 21,\n    };\n}\n\nexport interface InstallOptifineOptions extends InstallOptions {\n    /**\n     * The java exectable path. It will use `java` by default.\n     */\n    java?: string;\n}\n\n/**\n * Install optifine by optifine installer\n *\n * @param installer The installer jar file path\n * @param minecraft The minecraft location\n * @param options The option to install\n * @beta Might be changed and don't break the major version\n * @throws {@link BadOptifineJarError}\n */\nexport function installOptifine(installer: string, minecraft: MinecraftLocation, options?: InstallOptifineOptions) {\n    return installOptifineTask(installer, minecraft, options).startAndWait();\n}\n\nexport class BadOptifineJarError extends Error {\n    constructor(\n        public optifine: string,\n        /**\n         * What entry in jar is missing\n         */\n        public entry: string\n    ) {\n        super(`Missing entry ${entry} in optifine installer: ${optifine}`)\n    }\n\n    error = \"BadOptifineJar\"\n}\n\n/**\n * Install optifine by optifine installer task\n *\n * @param installer The installer jar file path\n * @param minecraft The minecraft location\n * @param options The option to install\n * @beta Might be changed and don't break the major version\n * @throws {@link BadOptifineJarError}\n */\nexport function installOptifineTask(installer: string, minecraft: MinecraftLocation, options: InstallOptifineOptions = {}) {\n    return task(\"installOptifine\", async function () {\n        let mc = MinecraftFolder.from(minecraft);\n\n        // context.update(0, 100);\n\n        const zip = await open(installer);\n        const entries = await readAllEntries(zip);\n        const record = getEntriesRecord(entries);\n        // context.update(10, 100);\n\n        const entry = record[\"net/optifine/Config.class\"] ?? record[\"Config.class\"] ?? record[\"notch/net/optifine/Config.class\"] ;\n        if (!entry) {\n            throw new BadOptifineJarError(installer, \"net/optifine/Config.class\");\n        }\n\n        const launchWrapperVersionEntry = record[\"launchwrapper-of.txt\"];\n        const launchWrapperVersion = launchWrapperVersionEntry ? await readEntry(zip, launchWrapperVersionEntry).then((b) => b.toString())\n            : undefined;\n        // context.update(15, 100);\n\n\n        const buf = await readEntry(zip, entry);\n        const reader = new ClassReader(buf);\n        class OptifineVisitor extends ClassVisitor {\n            fields: Record<string, any> = {};\n            visitField(access: number, name: string, desc: string, signature: string, value: any) {\n                this.fields[name] = value;\n                return null;\n            }\n        }\n        const visitor = new OptifineVisitor(Opcodes.ASM5);\n        reader.accept(visitor);\n        const mcversion: string = visitor.fields.MC_VERSION; // 1.14.4\n        const edition: string = visitor.fields.OF_EDITION; // HD_U\n        const release: string = visitor.fields.OF_RELEASE; // F5\n        const editionRelease = edition + \"_\" + release;\n\n        const versionJSON = generateOptifineVersion(editionRelease, mcversion, launchWrapperVersion, options);\n        const versionJSONPath = mc.getVersionJson(versionJSON.id);\n\n        // context.update(20, 100);\n        // write version json\n        await this.yield(task(\"json\", async () => {\n            await ensureFile(versionJSONPath);\n            await writeFile(versionJSONPath, JSON.stringify(versionJSON, null, 4));\n        }));\n\n        const launchWrapperEntry = record[`launchwrapper-of-${launchWrapperVersion}.jar`]\n        // write launch wrapper\n        if (launchWrapperEntry) {\n            await this.yield(task(\"library\", async () => {\n                const wrapperDest = mc.getLibraryByPath(`optifine/launchwrapper-of/${launchWrapperVersion}/launchwrapper-of-${launchWrapperVersion}.jar`)\n                await ensureFile(wrapperDest);\n                await writeFile(wrapperDest, await readEntry(zip, launchWrapperEntry));\n            }));\n        }\n\n        // write the optifine\n        await this.yield(task(\"jar\", async () => {\n            const dest = mc.getLibraryByPath(`optifine/Optifine/${mcversion}_${editionRelease}/Optifine-${mcversion}_${editionRelease}.jar`);\n            const mcJar = mc.getVersionJar(mcversion);\n\n            await ensureFile(dest);\n            await spawnProcess(options.java ?? \"java\", [\"-cp\", installer, \"optifine.Patcher\", mcJar, installer, dest]);\n        }));\n\n        return versionJSON.id;\n    });\n}\n","import { getPlatform, Platform } from \"@xmcl/core\";\nimport { Task, task } from \"@xmcl/task\";\nimport { exec } from \"child_process\";\nimport { EOL, platform, tmpdir } from \"os\";\nimport { basename, join, resolve } from \"path\";\nimport { DownloadTask } from \"./downloadTask\";\nimport { DownloadBaseOptions } from \"./http/download\";\nimport { fetchJson } from \"./http/fetch\";\nimport { ensureDir, missing, unlink } from \"./utils\";\n\nexport interface JavaInfo {\n    /**\n     * Full java executable path\n     */\n    path: string;\n    /**\n     * Java version string\n     */\n    version: string;\n    /**\n     * Major version of java\n     */\n    majorVersion: number;\n}\n\nexport interface InstallJavaOptions extends DownloadBaseOptions {\n    /**\n     * The destination of this installation\n     */\n    destination: string;\n    /**\n     * The cached directory which compressed java lzma will be download to.\n     * @default os.tempdir()\n     */\n    cacheDir?: string;\n    /**\n     * The platform to install. It will be auto-resolved by default.\n     * @default currentPlatform\n     */\n    platform?: Platform\n    /**\n     * Unpack lzma function. It must present, else it will not be able to unpack mojang provided LZMA.\n     */\n    unpackLZMA: UnpackLZMAFunction;\n}\n\nexport type UnpackLZMAFunction =\n    ((src: string, dest: string) => Promise<void>) |\n    ((src: string, dest: string) => Task<void>);\n\nexport class DownloadJRETask extends DownloadTask {\n    constructor(jre: DownloadInfo, dir: string, options: InstallJavaOptions) {\n        const { sha1, url } = jre;\n        const filename = basename(url);\n        const downloadDestination = resolve(dir, filename);\n\n        super({\n            url,\n            destination: downloadDestination,\n            validator: {\n                algorithm: \"sha1\",\n                hash: sha1,\n            },\n            segmentPolicy: options.segmentPolicy,\n            retryHandler: options.retryHandler,\n            agents: options.agents,\n        })\n\n        this.name = \"downloadJre\";\n        this.param = jre;\n    }\n}\n\ninterface DownloadInfo { sha1: string; url: string; version: string }\n\n/**\n * Install JRE from Mojang offical resource. It should install jdk 8.\n * @param options The install options\n */\nexport function installJreFromMojangTask(options: InstallJavaOptions) {\n    const {\n        destination,\n        unpackLZMA,\n        cacheDir = tmpdir(),\n        platform = getPlatform(),\n    } = options;\n    return task(\"installJreFromMojang\", async function () {\n        const info: { [system: string]: { [arch: string]: { jre: DownloadInfo } } }\n            = await this.yield(task(\"fetchInfo\", () => fetchJson(\"https://launchermeta.mojang.com/mc/launcher.json\")));\n        const system = platform.name;\n        function resolveArch() {\n            switch (platform.arch) {\n                case \"x86\":\n                case \"x32\": return \"32\";\n                case \"x64\": return \"64\";\n                default: return \"32\";\n            }\n        }\n        const currentArch = resolveArch();\n\n        if (!info[system] || !info[system][currentArch] || !info[system][currentArch].jre) {\n            throw new Error(\"No Java package available for your platform\")\n        }\n        const lzmaPath = await this.yield(new DownloadJRETask(info[system][currentArch].jre, cacheDir, options).map(function () { return this.to! }));\n        const result = unpackLZMA(lzmaPath, destination);\n        await ensureDir(destination);\n        if (result instanceof Promise) {\n            await this.yield(task(\"decompress\", () => result))\n        } else {\n            await this.yield(result);\n        }\n        await this.yield(task(\"cleanup\", () => unlink(lzmaPath)));\n    });\n}\n\n/**\n * Install JRE from Mojang offical resource. It should install jdk 8.\n * @param options The install options\n */\nexport function installJreFromMojang(options: InstallJavaOptions) {\n    return installJreFromMojangTask(options).startAndWait();\n}\n\n/**\n * Try to resolve a java info at this path. This will call `java -version`\n * @param path The java exectuable path.\n */\nexport async function resolveJava(path: string): Promise<JavaInfo | undefined> {\n    if (await missing(path)) { return undefined; }\n\n    return new Promise((resolve) => {\n        exec(`\"${path}\" -version`, (err, sout, serr) => {\n            if (serr) {\n                let ver = parseJavaVersion(serr);\n                if (ver) {\n                    resolve({ path, ...ver });\n                } else {\n                    resolve(undefined);\n                }\n            } else {\n                resolve(undefined);\n            }\n        });\n    });\n}\n\n/**\n * Parse version string and major version number from stderr of java process.\n *\n * @param versionText The stderr for `java -version`\n */\nexport function parseJavaVersion(versionText: string): { version: string; majorVersion: number } | undefined {\n    const getVersion = (str?: string) => {\n        if (!str) { return undefined; }\n        const match = /(\\d+\\.\\d+\\.\\d+)(_(\\d+))?/.exec(str);\n        if (match === null) { return undefined; }\n        return match[1];\n    };\n    let javaVersion = getVersion(versionText);\n\n    if (!javaVersion) { return undefined; }\n\n    let majorVersion = Number.parseInt(javaVersion.split(\".\")[0], 10);\n    if (majorVersion === 1) {\n        majorVersion = Number.parseInt(javaVersion.split(\".\")[1], 10);\n    }\n    let java = {\n        version: javaVersion,\n        majorVersion,\n    };\n    return java;\n}\n\n/**\n * Get all potential java locations for Minecraft.\n *\n * On mac/linux, it will perform `which java`. On win32, it will perform `where java`\n *\n * @returns The absolute java locations path\n */\nexport async function getPotentialJavaLocations(): Promise<string[]> {\n    let unchecked = new Set<string>();\n    let currentPlatform = platform();\n    let javaFile = currentPlatform === \"win32\" ? \"javaw.exe\" : \"java\";\n\n    if (process.env.JAVA_HOME) {\n        unchecked.add(join(process.env.JAVA_HOME, \"bin\", javaFile));\n    }\n\n    const which = () => new Promise<string>((resolve) => {\n        exec(\"which java\", (error, stdout) => {\n            resolve(stdout.replace(\"\\n\", \"\"));\n        });\n    });\n    const where = () => new Promise<string[]>((resolve) => {\n        exec(\"where java\", (error, stdout) => {\n            resolve(stdout.split(\"\\r\\n\"));\n        });\n    });\n\n    if (currentPlatform === \"win32\") {\n        const out = await new Promise<string[]>((resolve) => {\n            exec(\"REG QUERY HKEY_LOCAL_MACHINE\\\\Software\\\\JavaSoft\\\\ /s /v JavaHome\", (error, stdout) => {\n                if (!stdout) { resolve([]); }\n                resolve(stdout.split(EOL).map((item) => item.replace(/[\\r\\n]/g, \"\"))\n                    .filter((item) => item != null && item !== undefined)\n                    .filter((item) => item[0] === \" \")\n                    .map((item) => `${item.split(\"    \")[3]}\\\\bin\\\\javaw.exe`));\n            });\n        });\n        for (const o of [...out, ...await where()]) {\n            unchecked.add(o);\n        }\n        unchecked.add(\"C:\\\\Program Files (x86)\\\\Minecraft Launcher\\\\runtime\\\\jre-x64/X86\");\n    } else if (currentPlatform === \"darwin\") {\n        unchecked.add(\"/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin/java\");\n        unchecked.add(await which());\n    } else {\n        unchecked.add(await which());\n    }\n\n    let checkingList = Array.from(unchecked).filter((jPath) => typeof jPath === \"string\").filter((p) => p !== \"\");\n\n    return checkingList;\n}\n\n/**\n * Scan local java version on the disk.\n *\n * It will check if the passed `locations` are the home of java.\n * Notice that the locations should not be the executable, but the path of java installation, like JAVA_HOME.\n *\n * This will call `getPotentialJavaLocations` and then `resolveJava`\n *\n * @param locations The location (like java_home) want to check.\n * @returns All validate java info\n */\nexport async function scanLocalJava(locations: string[]): Promise<JavaInfo[]> {\n    let unchecked = new Set(locations);\n    let potential = await getPotentialJavaLocations();\n    potential.forEach((p) => unchecked.add(p));\n\n    let checkingList = [...unchecked].filter((jPath) => typeof jPath === \"string\").filter((p) => p !== \"\");;\n\n    const javas = await Promise.all(checkingList.map((jPath) => resolveJava(jPath)));\n    return javas.filter(((j) => j !== undefined) as (j?: JavaInfo) => j is JavaInfo);\n}\n","import { getPlatform, Platform } from \"@xmcl/core\";\nimport { Task, task } from \"@xmcl/task\";\nimport { join } from \"path\";\nimport { URL } from \"url\";\nimport { DownloadTask } from \"./downloadTask\";\nimport { Agents, withAgents } from \"./http/agents\";\nimport { DownloadBaseOptions, DownloadOptions } from \"./http/download\";\nimport { fetchJson } from \"./http/fetch\";\nimport { ensureDir, link, ParallelTaskOptions } from \"./utils\";\n/**\n * Contain all java runtimes basic info\n */\nexport interface JavaRuntimes {\n    linux: JavaRuntimeTargets\n    \"linux-i386\": JavaRuntimeTargets\n    \"mac-os\": JavaRuntimeTargets\n    \"windows-x64\": JavaRuntimeTargets\n    \"windows-x86\": JavaRuntimeTargets\n}\n\nexport interface JavaRuntimeTargets {\n    \"java-runtime-alpha\": JavaRuntimeTarget[]\n    \"java-runtime-beta\": JavaRuntimeTarget[]\n    \"jre-legacy\": JavaRuntimeTarget[]\n    \"minecraft-java-exe\": JavaRuntimeTarget[]\n    [key: string]: JavaRuntimeTarget[]\n}\n\nexport enum JavaRuntimeTargetType {\n    /**\n     * The legacy java version\n     */\n    Legacy = \"jre-legacy\",\n    /**\n     * The new java environment, which is the java 16\n     */\n    Alpha = \"java-runtime-alpha\",\n    Beta = \"java-runtime-beta\",\n    JavaExe = \"minecraft-java-exe\",\n}\n\n/**\n * Represent a java runtime\n */\nexport interface JavaRuntimeTarget {\n    /**\n     * Guessing this is the flight of this java runtime\n     */\n    availability: {\n        group: number\n        progress: number\n    }\n    /**\n     * The manifest detail of the resource\n     */\n    manifest: DownloadInfo\n    /**\n     * The basic version info of the manifest\n     */\n    version: {\n        /**\n         * The name of the version. e.g. `8u51`, `12`, `16.0.1.9.1`\n         */\n        name: string\n        /**\n         * The date string (UTC)\n         */\n        released: string\n    }\n}\n\n\nexport interface Entry {\n    type: \"file\" | \"link\" | \"directory\"\n}\n\nexport interface LinkEntry extends Entry {\n    type: \"link\"\n    /**\n     * The link target\n     */\n    target: string\n}\n\nexport interface DirectoryEntry extends Entry {\n    type: \"directory\"\n}\n\nexport interface DownloadInfo {\n    /**\n     * The sha info of the resource\n     */\n    sha1: string;\n    /**\n     * The size of the resource\n     */\n    size: number;\n    /**\n     * The url to download resource\n     */\n    url: string;\n}\n\nexport interface FileEntry extends Entry {\n    type: \"file\";\n    executable: boolean;\n    downloads: {\n        /**\n         * The raw format of the file\n         */\n        raw: DownloadInfo;\n        /**\n         * The lzma format of the file\n         */\n        lzma?: DownloadInfo;\n    };\n}\n\nexport type AnyEntry = FileEntry | DirectoryEntry | LinkEntry;\n\n/**\n * Contains info about every files in this java runtime\n */\nexport interface JavaRuntimeManifest {\n    target: JavaRuntimeTargetType | string;\n    /**\n     * The files of the java runtime\n     */\n    files: Record<string, AnyEntry>;\n\n    version: JavaRuntimeTarget[\"version\"];\n}\n\nexport const DEFAULT_RUNTIME_ALL_URL = \"https://launchermeta.mojang.com/v1/products/java-runtime/2ec0cc96c44e5a76b9c8b7c39df7210883d12871/all.json\"\n\nfunction normalizeUrls(url: string, fileHost?: string | string[]): string[] {\n    if (!fileHost) {\n        return [url];\n    }\n    if (typeof fileHost === \"string\") {\n        const u = new URL(url);\n        u.hostname = fileHost;\n        return [u.toString(), url];\n    }\n    return fileHost.map((host) => {\n        const u = new URL(url);\n        u.hostname = host;\n        return u.toString();\n    }).concat(url);\n}\n\nexport interface FetchJavaRuntimeManifestOptions extends DownloadBaseOptions {\n    /**\n     * The alternative download host for the file\n     */\n    apiHost?: string | string[];\n    /**\n     * The url of the all runtime json\n     */\n    url?: string;\n    /**\n     * The platform to install. It will be auto-resolved by default.\n     * @default getPlatform()\n     */\n    platform?: Platform;\n    /**\n     * The install java runtime type\n     * @default InstallJavaRuntimeTarget.Next\n     */\n    target?: JavaRuntimeTargetType | string;\n    /**\n     * The index manifest of the java runtime. If this is not presented, it will fetch by platform and all platform url.\n     */\n    manifestIndex?: JavaRuntimes;\n}\n\n/**\n * Fetch java runtime manifest. It should be able to resolve to your platform, or you can assign the platform.\n *\n * Also, you should assign the target to download, or it will use the latest java 16.\n * @param options The options of fetch runtime manifest\n */\nexport async function fetchJavaRuntimeManifest(options: FetchJavaRuntimeManifestOptions = {}): Promise<JavaRuntimeManifest> {\n    const manifestIndex = options.manifestIndex ?? await fetchJson(normalizeUrls(options.url ?? DEFAULT_RUNTIME_ALL_URL, options.apiHost)[0]) as JavaRuntimes;\n    const platform = options.platform ?? getPlatform();\n    const runtimeTarget = options.target ?? JavaRuntimeTargetType.Beta;\n    const resolveTarget = () => {\n        if (platform.name === \"windows\") {\n            if (platform.arch === \"x64\") {\n                return manifestIndex[\"windows-x64\"];\n            }\n            if (platform.arch === \"x86\" || platform.arch === \"x32\") {\n                return manifestIndex[\"windows-x86\"];\n            }\n        }\n        if (platform.name === \"osx\") {\n            return manifestIndex[\"mac-os\"];\n        }\n        if (platform.name === \"linux\") {\n            if (platform.arch === \"x86\" || platform.arch === \"x32\") {\n                return manifestIndex[\"linux-i386\"];\n            }\n            if (platform.arch === \"x64\") {\n                return manifestIndex.linux;\n            }\n        }\n        throw new Error(\"Cannot resolve platform\");\n    };\n    const targets = resolveTarget()[runtimeTarget];\n    if (targets && targets.length > 0) {\n        const target = targets[0];\n        const manifestUrl = normalizeUrls(target.manifest.url, options.apiHost)[0];\n        const manifest = await fetchJson(manifestUrl) as JavaRuntimeManifest;\n        const result: JavaRuntimeManifest = {\n            files: manifest.files,\n            target: runtimeTarget,\n            version: target.version,\n        };\n        return result;\n    } else {\n        throw new Error();\n    }\n}\n\n\nexport interface InstallJavaRuntimeOptions extends DownloadBaseOptions, ParallelTaskOptions {\n    /**\n     * The alternative download host for the file\n     */\n    apiHost?: string | string[];\n    /**\n     * The destination of this installation\n     */\n    destination: string;\n    /**\n     * The actual manfiest to install.\n     */\n    manifest: JavaRuntimeManifest;\n    /**\n     * Download lzma compressed version instead of raw version.\n     * - If `true`, it will just download lzma file version, you need to decompress by youself!\n     * - If `Function`, it will use that function to decompress the file!\n     */\n    lzma?: boolean | ((compressedFilePath: string, targetPath: string) => Promise<void>)\n}\n\n/**\n * Install java runtime from java runtime manifest\n * @param options The options to install java runtime\n */\nexport function installJavaRuntimesTask(options: InstallJavaRuntimeOptions): Task<void> {\n    return task(\"installJavaRuntime\", async function () {\n        const destination = options.destination;\n        const manifest = options.manifest;\n        const decompressFunction = typeof options.lzma === \"function\" ? options.lzma : undefined\n        const downloadLzma = !!options.lzma\n        class DownloadAndDecompressTask extends DownloadTask {\n            constructor(options: DownloadOptions) {\n                super(options)\n            }\n\n            async runTask() {\n                const result = await super.runTask()\n                if (this._total === this._progress) {\n                    const dest = this.download.destination.substring(0, this.download.destination.length - 5)\n                    await decompressFunction!(this.download.destination, dest)\n                }\n                return result\n            }\n        }\n        await withAgents(options, (options) => this.all(Object.entries(manifest.files)\n            .filter(([file, entry]) => entry.type === \"file\")\n            .map(([file, entry]) => {\n                const fEntry = entry as FileEntry;\n                const downloadInfo = (downloadLzma && fEntry.downloads.lzma) ? fEntry.downloads.lzma : fEntry.downloads.raw\n                const isLzma = downloadInfo == fEntry.downloads.lzma\n                const dest = isLzma ? (join(destination, file) + \".lzma\") : join(destination, file);\n                const urls = normalizeUrls(downloadInfo.url, options.apiHost);\n                const downloadOptions: DownloadOptions = {\n                    url: urls,\n                    validator: {\n                        algorithm: \"sha1\",\n                        hash: downloadInfo.sha1,\n                    },\n                    destination: dest,\n                    segmentPolicy: options.segmentPolicy,\n                    retryHandler: options.retryHandler,\n                    agents: options.agents,\n                }\n                return isLzma && decompressFunction\n                    ? new DownloadAndDecompressTask(downloadOptions).setName(\"download\")\n                    : new DownloadTask(downloadOptions).setName(\"download\");\n            }), {\n            throwErrorImmediately: options.throwErrorImmediately,\n            getErrorMessage: (e) => `Fail to install java runtime ${manifest.version.name} on ${manifest.target}`,\n        }));\n        await Promise.all(Object.entries(manifest.files)\n            .filter(([file, entry]) => entry.type !== \"file\")\n            .map(async ([file, entry]) => {\n                const dest = join(destination, file);\n                if (entry.type === \"directory\") {\n                    await ensureDir(dest);\n                } else if (entry.type === \"link\") {\n                    await link(join(destination, entry.target), destination);\n                }\n            }));\n    });\n}\n","import { diagnoseFile, Issue, LibraryIssue, MinecraftFolder, MinecraftLocation, Version } from \"@xmcl/core\";\nimport { InstallProfile, resolveProcessors, PostProcessor } from \"./profile\";\n\nexport type InstallIssues = ProcessorIssue | LibraryIssue;\n\n/**\n * The processor issue\n */\nexport interface ProcessorIssue extends Issue {\n    role: \"processor\";\n\n    /**\n     * The processor\n     */\n    processor: PostProcessor;\n}\n\nexport interface InstallProfileIssueReport {\n    minecraftLocation: MinecraftFolder;\n    installProfile: InstallProfile;\n    issues: InstallIssues[];\n}\n\n/**\n * Diagnose a install profile status. Check if it processor output correctly processed.\n *\n * This can be used for check if forge correctly installed when minecraft >= 1.13\n * @beta\n *\n * @param installProfile The install profile.\n * @param minecraftLocation The minecraft location\n */\nexport async function diagnoseInstall(installProfile: InstallProfile, minecraftLocation: MinecraftLocation) {\n    const mc = MinecraftFolder.from(minecraftLocation);\n    const report: InstallProfileIssueReport = {\n        minecraftLocation: mc,\n        installProfile,\n        issues: [],\n    };\n    const issues = report.issues;\n    const processors: PostProcessor[] = resolveProcessors(\"client\", installProfile, mc);\n    await Promise.all(Version.resolveLibraries(installProfile.libraries).map(async (lib) => {\n        const libPath = mc.getLibraryByPath(lib.download.path);\n        const issue = await diagnoseFile({\n            role: \"library\",\n            file: libPath,\n            expectedChecksum: lib.download.sha1,\n            hint: \"Problem on install_profile! Please consider to use Installer.installByProfile to fix.\"\n        });\n        if (issue) {\n            issues.push(Object.assign(issue, { library: lib }));\n        }\n    }));\n    for (const proc of processors) {\n        if (proc.outputs) {\n            for (const file in proc.outputs) {\n                const issue = await diagnoseFile({\n                    role: \"processor\",\n                    file,\n                    expectedChecksum: proc.outputs[file].replace(/'/g, \"\"),\n                    hint: \"Re-install this installer profile!\"\n                });\n                if (issue) {\n                    issues.push(Object.assign(issue, { processor: proc }));\n                }\n            }\n        }\n    }\n    return report;\n}\n\n"],"names":["funlink","fstat","fslink","fopen","fclose","fcopyFile","exists","mkdir","requests","writeFile","readFile","HttpAgent","HttpsAgent","fetch","open","pipeline","VersionJson","parseForge"],"mappings":"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"}